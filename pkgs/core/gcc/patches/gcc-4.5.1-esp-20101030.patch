diff -Nur gcc-4.5.1-vanilla/configure gcc-4.5.1/configure
--- gcc-4.5.1-vanilla/configure	2010-06-24 23:06:37.000000000 +0200
+++ gcc-4.5.1/configure	2010-10-30 15:13:15.694229807 +0200
@@ -707,6 +707,7 @@
 CFLAGS
 CC
 target_subdir
+enable_esp
 host_subdir
 build_subdir
 build_libsubdir
@@ -1485,6 +1486,11 @@
   --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]
   --enable-gold           use gold instead of ld
   --enable-libada         build libada directory
+  --enable-esp
+			   Enable Stack protector, Position independent executable as
+			   default if we have suppot for it when compiling
+			   and link with -z relro and -z now as default.
+			   Linux targets supported i*86, x86_64, powerpc, powerpc64, ia64 and arm
   --enable-libssp         build libssp directory
   --enable-build-with-cxx build with C++ compiler instead of C compiler
   --disable-ppl-version-check    disable check for PPL version
@@ -3164,6 +3170,25 @@
   noconfigdirs="$noconfigdirs gnattools"
 fi
 
+# Check whether --enable-esp was given and target have the support.
+# Check whether --enable-esp or --disable-esp was given.
+if test "${enable_esp+set}" = set; then
+  enableval="$enable_esp"
+
+  case $target in
+    i?86*-*-linux* | x86_64*-*-linux* | powerpc-*-linux* | powerpc64-*-linux* | arm*-*-linux* | ia64-*-linux*)
+      enable_esp=yes
+      ;;
+    *)
+      { { echo "$as_me:$LINENO: error: *** --enable-esp is not supported on this $target target." >&5
+echo "$as_me: error: *** --enable-esp is not supported on this $target target." >&2;}
+   { (exit 1); exit 1; }; }
+      ;;
+  esac
+
+fi;
+
+
 # Check whether --enable-libssp was given.
 if test "${enable_libssp+set}" = set; then :
   enableval=$enable_libssp; ENABLE_LIBSSP=$enableval
@@ -14354,6 +14379,9 @@
       *) stage1_cflags="-g -J" ;;
     esac ;;
 esac
+if test x$enable_esp = xyes; then
+       stage1_cflags="$stage1_cflags -fno-stack-protector"
+fi
 
 # This is aimed to mimic bootstrap with a non-GCC compiler to catch problems.
 if test "$GCC" = yes -a "$ENABLE_BUILD_WITH_CXX" != yes; then
diff -Nur gcc-4.5.1-vanilla/gcc/config/linux.h gcc-4.5.1/gcc/config/linux.h
--- gcc-4.5.1-vanilla/gcc/config/linux.h	2009-04-09 17:00:19.000000000 +0200
+++ gcc-4.5.1/gcc/config/linux.h	2010-10-30 15:13:15.845989169 +0200
@@ -43,7 +43,11 @@
    object constructed before entering `main'.  */
    
 #undef	STARTFILE_SPEC
-#if defined HAVE_LD_PIE
+#if defined (HAVE_LD_PIE) && defined (ENABLE_CRTBEGINTS)
+#define STARTFILE_SPEC \
+  "%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} crti.o%s \
+   %{static:%{pie:crtbeginTS.o%s;:crtbeginT.o%s}} %{!static:%{shared|pie:crtbeginS.o%s;:crtbegin.o%s}}"
+#elif defined (HAVE_LD_PIE) && ! defined (ENABLE_CRTBEGINTS)
 #define STARTFILE_SPEC \
   "%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \
    crti.o%s %{static:crtbeginT.o%s;shared|pie:crtbeginS.o%s;:crtbegin.o%s}"
diff -Nur gcc-4.5.1-vanilla/gcc/config/rs6000/linux64.h gcc-4.5.1/gcc/config/rs6000/linux64.h
--- gcc-4.5.1-vanilla/gcc/config/rs6000/linux64.h	2010-03-17 05:44:37.000000000 +0100
+++ gcc-4.5.1/gcc/config/rs6000/linux64.h	2010-10-30 15:13:15.843989710 +0200
@@ -162,7 +162,7 @@
 #endif
 
 #define ASM_SPEC32 "-a32 %{n} %{T} %{Ym,*} %{Yd,*} \
-%{mrelocatable} %{mrelocatable-lib} %{fpic:-K PIC} %{fPIC:-K PIC} \
+%{mrelocatable} %{mrelocatable-lib} %{fpic|fPIC|fpie|fPIE:-K PIC} \
 %{memb} %{!memb: %{msdata=eabi: -memb}} \
 %{!mlittle: %{!mlittle-endian: %{!mbig: %{!mbig-endian: \
     %{mcall-freebsd: -mbig} \
diff -Nur gcc-4.5.1-vanilla/gcc/config/rs6000/sysv4.h gcc-4.5.1/gcc/config/rs6000/sysv4.h
--- gcc-4.5.1-vanilla/gcc/config/rs6000/sysv4.h	2009-11-25 21:23:20.000000000 +0100
+++ gcc-4.5.1/gcc/config/rs6000/sysv4.h	2010-10-30 15:13:15.846988480 +0200
@@ -883,7 +883,12 @@
 %{!mnewlib: %{pthread:-lpthread} %{shared:-lc} \
 %{!shared: %{profile:-lc_p} %{!profile:-lc}}}"
 
-#ifdef HAVE_LD_PIE
+#if defined (HAVE_LD_PIE) && defined (ENABLE_CRTBEGINTS)
+#define STARTFILE_LINUX_SPEC "\
+%{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \
+%{mnewlib:ecrti.o%s;:crti.o%s} \
+%{static:%{pie:crtbeginTS.o%s;:crtbeginT.o%s}} %{!static:%{shared|pie:crtbeginS.o%s;:crtbegin.o%s}}"
+#elif defined (HAVE_LD_PIE) && ! defined (ENABLE_CRTBEGINTS)
 #define	STARTFILE_LINUX_SPEC "\
 %{!shared: %{pg|p|profile:gcrt1.o%s;pie:Scrt1.o%s;:crt1.o%s}} \
 %{mnewlib:ecrti.o%s;:crti.o%s} \
diff -Nur gcc-4.5.1-vanilla/gcc/config.in gcc-4.5.1/gcc/config.in
--- gcc-4.5.1-vanilla/gcc/config.in	2010-07-31 11:34:58.000000000 +0200
+++ gcc-4.5.1/gcc/config.in	2010-10-30 15:13:15.784230669 +0200
@@ -52,6 +52,12 @@
 #endif
 
 
+/* Define to 1 to enable crtbeginTS.o. */
+#ifndef USED_FOR_TARGET
+#undef ENABLE_CRTBEGINTS
+#endif
+
+
 /* Define to 1 to specify that we are using the BID decimal floating point
    format instead of DPD */
 #ifndef USED_FOR_TARGET
@@ -71,6 +77,12 @@
 #endif
 
 
+/* Define to 1 to enable esp. */
+#ifndef USED_FOR_TARGET
+#undef ENABLE_ESP
+#endif
+
+
 /* Define to 1 to enable fixed-point arithmetic extension to C. */
 #ifndef USED_FOR_TARGET
 #undef ENABLE_FIXED_POINT
diff -Nur gcc-4.5.1-vanilla/gcc/configure gcc-4.5.1/gcc/configure
--- gcc-4.5.1-vanilla/gcc/configure	2010-06-14 12:38:18.000000000 +0200
+++ gcc-4.5.1/gcc/configure	2010-10-30 15:13:15.707229526 +0200
@@ -680,6 +680,8 @@
 HOST_LIBS
 GGC
 libgcc_visibility
+enable_esp
+enable_crtbeginTS
 gcc_cv_readelf
 gcc_cv_objdump
 ORIGINAL_NM_FOR_TARGET
@@ -24831,6 +24833,50 @@
     ;;
 esac
 
+echo "$as_me:$LINENO: checking linker -z now support" >&5
+echo $ECHO_N "checking linker -z now support... $ECHO_C" >&6
+if test "${gcc_cv_ld_now+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  gcc_cv_ld_now=no
+if test $in_tree_ld = yes ; then
+  if test "$gcc_cv_gld_major_version" -eq 2 -a "$gcc_cv_gld_minor_version" -ge 16 -o "$gcc_cv_gld_major_version" -gt 2 \
+     && test $in_tree_ld_is_elf = yes; then
+    gcc_cv_ld_now=yes
+  fi
+elif test x$gcc_cv_ld != x; then
+       # Check if linker supports -z now options
+       if $gcc_cv_ld --help 2>/dev/null | grep now > /dev/null; then
+               gcc_cv_ld_now=yes
+       fi
+fi
+
+fi
+echo "$as_me:$LINENO: result: $gcc_cv_ld_now" >&5
+echo "${ECHO_T}$gcc_cv_ld_now" >&6
+
+echo "$as_me:$LINENO: checking linker -z relro support" >&5
+echo $ECHO_N "checking linker -z relro support... $ECHO_C" >&6
+if test "${gcc_cv_ld_relro+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+  gcc_cv_ld_relro=no
+if test $in_tree_ld = yes ; then
+  if test "$gcc_cv_gld_major_version" -eq 2 -a "$gcc_cv_gld_minor_version" -ge 16 -o "$gcc_cv_gld_major_version" -gt 2 \
+     && test $in_tree_ld_is_elf = yes; then
+    gcc_cv_ld_relro=yes
+  fi
+elif test x$gcc_cv_ld != x; then
+       # Check if linker supports -z relro and -z norelro options
+       if $gcc_cv_ld --help 2>/dev/null | grep relro > /dev/null; then
+               gcc_cv_ld_relro=yes
+       fi
+fi
+
+fi
+echo "$as_me:$LINENO: result: $gcc_cv_ld_relro" >&5
+echo "${ECHO_T}$gcc_cv_ld_relro" >&6
+
 { $as_echo "$as_me:${as_lineno-$LINENO}: checking linker --build-id support" >&5
 $as_echo_n "checking linker --build-id support... " >&6; }
 if test "${gcc_cv_ld_buildid+set}" = set; then :
@@ -25014,6 +25060,74 @@
 
 fi
 
+if test x$enable_esp = xyes ; then
+case $target in
+		ia64*-*-linux*)
+			if test x$gcc_cv_ld_now = xyes; then
+				enable_esp_ld=yes
+			else
+				enable_esp_ld=no
+			fi
+			;;
+		*-*-linux*)
+			if test x$gcc_cv_ld_relro = xyes && test x$gcc_cv_ld_now = xyes; then
+				enable_esp_ld=yes
+			else
+				enable_esp_ld=no
+			fi
+			;;
+		*)
+			enable_esp_ld=no
+			;;
+	esac
+else
+	enable_espf_ld=no
+fi
+if test x$enable_esp_ld = xyes; then
+
+cat >>confdefs.h <<\_ACEOF
+#define ENABLE_ESP 1
+_ACEOF
+
+fi
+
+if test x$enable_esp = xyes && test x$enable_esp_ld = xno; then
+	{ { echo "$as_me:$LINENO: error: *** --enable-esp is not supported. You don't have -z,relro or -z,now support in the linker." >&5
+echo "$as_me: error: *** --enable-esp is not supported. You don't have -z,relro or -z,now support in the linker." >&2;}
+   { (exit 1); exit 1; }; }
+fi
+
+echo "$as_me:$LINENO: checking for crtbeginTS.o support" >&5
+echo $ECHO_N "checking for crtbeginTS.o support... $ECHO_C" >&6
+if test "${enable_crtbeginTS+set}" = set; then
+  echo $ECHO_N "(cached) $ECHO_C" >&6
+else
+
+if test x$enable_esp = xyes ; then
+	case "$target" in
+	  ia64*-*-linux*)
+			enable_crtbeginTS=no ;;
+      *-*-linux*)
+		if test x$gcc_cv_ld_pie = xyes && test x$lt_cv_prog_compiler_static_works = xyes; then
+			enable_crtbeginTS=yes
+     	fi
+		;;
+  	  *) enable_crtbeginTS=no ;;
+    esac
+fi
+
+fi
+echo "$as_me:$LINENO: result: $enable_crtbeginTS" >&5
+echo "${ECHO_T}$enable_crtbeginTS" >&6
+
+if test x$enable_crtbeginTS = xyes; then
+
+cat >>confdefs.h <<\_ACEOF
+#define ENABLE_CRTBEGINTS 1
+_ACEOF
+
+fi
+
 # Check if TFmode long double should be used by default or not.
 # Some glibc targets used DFmode long double, but with glibc 2.4
 # and later they can use TFmode.
diff -Nur gcc-4.5.1-vanilla/gcc/cp/lang-specs.h gcc-4.5.1/gcc/cp/lang-specs.h
--- gcc-4.5.1-vanilla/gcc/cp/lang-specs.h	2007-08-06 13:10:19.000000000 +0200
+++ gcc-4.5.1/gcc/cp/lang-specs.h	2010-10-30 15:13:15.849979777 +0200
@@ -47,7 +47,7 @@
 		%(cpp_options) %2 -o %{save-temps:%b.ii} %{!save-temps:%g.ii} \n}\
       cc1plus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.ii} %{!save-temps:%g.ii}}\
 	      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\
-	%(cc1_options) %2 %{+e1*}\
+	%(cc1_options) %(esp_options) %2 %{+e1*}\
 	%{!fsyntax-only:-o %g.s %{!o*:--output-pch=%i.gch} %W{o*:--output-pch=%*}%V}}}}",
      CPLUSPLUS_CPP_SPEC, 0, 0},
   {"@c++",
@@ -57,11 +57,11 @@
 		%(cpp_options) %2 -o %{save-temps:%b.ii} %{!save-temps:%g.ii} \n}\
       cc1plus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.ii} %{!save-temps:%g.ii}}\
 	      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\
-	%(cc1_options) %2 %{+e1*}\
+	%(cc1_options) %(esp_options) %2 %{+e1*}\
        %{!fsyntax-only:%(invoke_as)}}}}",
      CPLUSPLUS_CPP_SPEC, 0, 0},
   {".ii", "@c++-cpp-output", 0, 0, 0},
   {"@c++-cpp-output",
    "%{!M:%{!MM:%{!E:\
-    cc1plus -fpreprocessed %i %(cc1_options) %2 %{+e*}\
+    cc1plus -fpreprocessed %i %(cc1_options) %(esp_options) %2 %{+e*}\
     %{!fsyntax-only:%(invoke_as)}}}}", 0, 0, 0},
diff -Nur gcc-4.5.1-vanilla/gcc/doc/invoke.texi gcc-4.5.1/gcc/doc/invoke.texi
--- gcc-4.5.1-vanilla/gcc/doc/invoke.texi	2010-04-06 16:02:22.000000000 +0200
+++ gcc-4.5.1/gcc/doc/invoke.texi	2010-10-30 15:13:15.864979490 +0200
@@ -7856,6 +7856,11 @@
 @opindex fstack-protector-all
 Like @option{-fstack-protector} except that all functions are protected.
 
+NOTE: When --enable-esp this option is enabled by default 
+for C, C++, ObjC, ObjC++, if neither @option{-fno-stack-protector}
+or @option{-nostdlib} or @option{-nodefaultlibs} or 
+@option{-fstack-protector} are found.
+
 @item -fsection-anchors
 @opindex fsection-anchors
 Try to reduce the number of symbolic address calculations by using
@@ -8705,6 +8710,12 @@
 that were used to generate code (@option{-fpie}, @option{-fPIE},
 or model suboptions) when you specify this option.
 
+NOTE: When --enable-esp this option is enabled by default
+for C, C++, ObjC, ObjC++, if neither @option{-fno-pie} or @option{-fno-PIE}
+or @option{-fno-pic} or @option{-fno-PIC} or @option{-nostdlib} or
+@option{-nostartfiles} or @option{-shared} or @option{-pg} or @option{-p}
+are found.
+
 @item -rdynamic
 @opindex rdynamic
 Pass the flag @option{-export-dynamic} to the ELF linker, on targets
@@ -17251,6 +17262,11 @@
 @code{__pie__} and @code{__PIE__}.  The macros have the value 1
 for @option{-fpie} and 2 for @option{-fPIE}.
 
+NOTE: When --enable-esp this option is enabled by default
+for C, C++, ObjC, ObjC++, if neither @option{-fno-pie} or @option{-fno-PIE}
+or @option{-fno-pic} or @option{-fno-PIC} or @option{-nostdlib} or
+@option{-nostartfiles} or @option{-shared} are found.
+
 @item -fno-jump-tables
 @opindex fno-jump-tables
 Do not use jump tables for switch statements even where it would be
diff -Nur gcc-4.5.1-vanilla/gcc/esp.h gcc-4.5.1/gcc/esp.h
--- gcc-4.5.1-vanilla/gcc/esp.h	1970-01-01 01:00:00.000000000 +0100
+++ gcc-4.5.1/gcc/esp.h	2010-10-30 15:13:15.841979565 +0200
@@ -0,0 +1,145 @@
+/* License terms see GNU GENERAL PUBLIC LICENSE Version 3.
+ * Version 20100527.1
+ * Magnus Granberg (Zorry) <zorry@gentoo.org>  */
+#ifndef GCC_ESP_H
+#define GCC_ESP_H
+
+/*	This file will add -fstack-protector-all, -fPIE, -pie and -z now 
+	as default if the defines and the spec allow it.
+	Added a hack for gcc-specs-* in toolchain-funcs.eclass and _filter-hardened in flag-o-matic.eclass
+	to support older hardened GCC patches and we don't need to change the code on gcc-specs-* and _filter-hardened.
+	This will add some unsupported upstream commands options as -nopie and -nonow.
+	-D__KERNEL__ is added so we don't have -fPIE, -pie and -fstack-protector-all when building kernels.
+	ESP_CC1_SPEC is added to CC1_SPEC.
+	ESP_CC1_STRICT_OVERFLOW_SPEC is added so we don't disable the strict-overflow check.
+	ESP_LINK_PIE_CHECK_SPEC check for -pie, -p, -pg, -profile and -static.
+	ENABLE_CRTBEGINTS add support for crtbeginTS.o, build -static with -fPIE or -fpie.
+*/
+#ifdef ENABLE_ESP
+	
+	/* Hack to support gcc-specs-* in toolchain-funcs.eclass and _filter-hardened in flag-o-matic.eclass  */
+	#define ESP_CC1_SPEC " %(esp_cc1_ssp) %(esp_cc1_pie) %(esp_cc1_strict_overflow)"
+	#if defined ( EFAULT_SSP ) || defined ( EFAULT_PIE_SSP )
+		#define ESP_CC1_SSP_SPEC "%{!fno-stack-protector: %{!fno-stack-protector-all: }}"
+	#else
+		#define ESP_CC1_SSP_SPEC ""
+	#endif
+	#if defined ( EFAULT_PIE ) || defined ( EFAULT_PIE_SSP )
+		#define ESP_CC1_PIE_SPEC "%{!nopie: }"
+	#else
+		#define ESP_CC1_PIE_SPEC ""
+	#endif
+	#define ESP_CC1_STRICT_OVERFLOW_SPEC "%{!fstrict-overflow:%{!fno-strict-overflow: -fno-strict-overflow}}"
+
+	/*	ESP_LINK_SPEC is added to LINK_PIE_SPEC if esp is enable
+		-z now will be added if we don't have -vanilla spec. We do a -pie incompatible check
+		Don't remove the specs in the end  */
+	#define ESP_LINK_SPEC "%(esp_link_now) %(esp_link_pie_check) "
+	#define ESP_LINK_NOW_SPEC "%{!nonow:-z now}"
+
+	/*	We use ESP_COMMAND_OPTIONS_SPEC to add pie command-line options.  */
+	#define ESP_COMMAND_OPTIONS_SPEC "%{!D__KERNEL__:%{!nopie:%(esp_options_pie) %(esp_link_pie)}}"
+	
+	/*	ESP_OPTIONS_SPEC is added to the compiler spec in gcc/gcc.c  */
+	#define ESP_OPTIONS_SPEC "%(esp_options_ssp)"
+
+	/*	ESP_CPP_OPTIONS_SPEC is added to the cpp_options spec in gcc/gcc.c  
+		For precompiling headers.  */
+	#define ESP_CPP_OPTIONS_SPEC "%(esp_options_ssp)"
+
+	/*  This will add -fstack-protector-all if we don't have -nostdlib -nodefaultlibs -fno-stack-protector -fstack-protector
+		-fstack-protector-all and we have EFAULT_SSP or EFAULT_PIE_SSP defined.  */
+	#if defined ( EFAULT_SSP ) || defined ( EFAULT_PIE_SSP )
+		#define ESP_OPTIONS_SSP_SPEC \
+			"%{!D__KERNEL__:%{!nostdlib:%{!nodefaultlibs: %{!fno-stack-protector: \
+			%{!fstack-protector:%{!fstack-protector-all:-fstack-protector-all}}}}}}"
+	#else
+		#define ESP_OPTIONS_SSP_SPEC ""
+	#endif
+
+	/* If EFAULT_PIE or EFAULT_PIE_SSP is defined we will add -fPIE -pie  */
+	#if defined ( EFAULT_PIE ) || defined ( EFAULT_PIE_SSP )
+
+		/*  This will add -fPIE if we don't have -pie -fpic -fPIC -fpie -fPIE -fno-pic -fno-PIC -fno-pie -fno-PIE -shared -static
+			-nostdlib -nostartfiles.  */
+		/*  With ENABLE_CRTBEGINTS we don't need to check for -static  */
+		#ifdef ENABLE_CRTBEGINTS
+			#define ESP_OPTIONS_PIE_SPEC \
+				"%{!pie: %{!fpic:%{!fPIC:%{!fpie:%{!fPIE: %{!fno-pic:%{!fno-PIC:%{!fno-pie:%{!fno-PIE: \
+				%{!shared: %{!nostdlib: %{!nostartfiles:-fPIE}} } }}}} }}}} }"
+		#else
+			#define ESP_OPTIONS_PIE_SPEC \
+				"%{!pie: %{!fpic:%{!fPIC:%{!fpie:%{!fPIE: %{!fno-pic:%{!fno-PIC:%{!fno-pie:%{!fno-PIE: \
+				%{!shared: %{!static: %{!nostdlib: %{!nostartfiles:-fPIE}} } }}}} }}}} }}"
+		#endif
+
+		/*  This will add -pie if we don't have -pie -A -fno-pic -fno-PIC -fno-pie -fno-PIE -shared -static -r -nostdlib 
+			-nostartfiles  */
+		/*  With ENABLE_CRTBEGINTS we don't need to check for -static
+			and we add -pie only to get the start and endfiles. -pie will not go to the linker. */
+		#ifdef ENABLE_CRTBEGINTS
+			#define ESP_LINK_PIE_SPEC \
+				"%{!pie:%{!A:%{!fno-pie:%{!fno-PIE:%{!fno-pic:%{!fno-PIC:%{!shared:%{!r: \
+				%{!nostdlib:%{!nostartfiles:-pie}}}}}}}}}}"
+		#else
+			#define ESP_LINK_PIE_SPEC \
+				"%{!pie:%{!A:%{!fno-pie:%{!fno-PIE:%{!fno-pic:%{!fno-PIC:%{!shared:%{!static:%{!r: \
+				%{!nostdlib:%{!nostartfiles:-pie}}}}}}}}}}}"
+		#endif
+		
+		/*  This will check if -pie is set when (-static) -pg -p -profile. If set it will make gcc print out
+			"-pie and (static)|pg|p|profile are incompatible when linking"  */
+		/*  With ENABLE_CRTBEGINTS we don't need to check for -static  */
+		#ifdef ENABLE_CRTBEGINTS
+			#define ESP_LINK_PIE_CHECK_SPEC \
+				"%{pie:%{pg|p|profile:%e-pie and -pg|p|profile are incompatible when linking}}"
+		#else
+			#define ESP_LINK_PIE_CHECK_SPEC \
+				"%{pie:%{static|pg|p|profile:%e-pie and -static|pg|p|profile are incompatible when linking}}"
+		#endif
+
+		/*  We don't pass -pie to the linker when -static.  */
+		#ifdef ENABLE_CRTBEGINTS
+			#define LINK_PIE_SPEC "%{!static:%{pie:-pie}} %(esp_link)"
+		#else
+			#define LINK_PIE_SPEC "%{pie:-pie} %(esp_link)"
+		#endif
+
+	#else
+		#define ESP_OPTIONS_PIE_SPEC ""
+		#define ESP_LINK_PIE_CHECK_SPEC ""
+		#define ESP_LINK_PIE_SPEC ""
+		#define LINK_PIE_SPEC "%{pie:-pie} %(esp_link)"
+	#endif
+
+	/*  We add extra spec name's to the EXTRA_SPECS list  */
+	#define ESP_EXTRA_SPECS \
+		{ "esp_cc1",								ESP_CC1_SPEC },					\
+		{ "esp_cc1_pie",							ESP_CC1_PIE_SPEC },				\
+		{ "esp_cc1_ssp",							ESP_CC1_SSP_SPEC },				\
+		{ "esp_cc1_strict_overflow",				ESP_CC1_STRICT_OVERFLOW_SPEC },	\
+		{ "esp_link",								ESP_LINK_SPEC },				\
+		{ "esp_link_now",							ESP_LINK_NOW_SPEC },			\
+		{ "esp_link_pie",							ESP_LINK_PIE_SPEC },			\
+		{ "esp_link_pie_check",						ESP_LINK_PIE_CHECK_SPEC },		\
+		{ "esp_command_options",					ESP_COMMAND_OPTIONS_SPEC },		\
+		{ "esp_cpp_options",						ESP_CPP_OPTIONS_SPEC },			\
+		{ "esp_options",							ESP_OPTIONS_SPEC },				\
+		{ "esp_options_pie",						ESP_OPTIONS_PIE_SPEC },			\
+		{ "esp_options_ssp",						ESP_OPTIONS_SSP_SPEC }
+
+	static const char *esp_command_options_spec = ESP_COMMAND_OPTIONS_SPEC;
+	static const char *cc1_spec = CC1_SPEC ESP_CC1_SPEC;
+
+#else /* If not ESP_ENABLE defined do this.  */
+
+	#define ESP_OPTIONS_SPEC ""
+	#define ESP_CPP_OPTIONS_SPEC ""
+
+	/*  We add extra spec name's to the EXTRA_SPECS list  */
+	#define ESP_EXTRA_SPECS \
+		{ "esp_options",				ESP_OPTIONS_SPEC },			\
+		{ "esp_cpp_options",			ESP_CPP_OPTIONS_SPEC }
+
+#endif
+#endif /* End GCC_ESP_H */
diff -Nur gcc-4.5.1-vanilla/gcc/gcc.c gcc-4.5.1/gcc/gcc.c
--- gcc-4.5.1-vanilla/gcc/gcc.c	2010-04-18 19:46:08.000000000 +0200
+++ gcc-4.5.1/gcc/gcc.c	2010-10-30 15:13:15.834979921 +0200
@@ -84,6 +84,7 @@
 #include "gcc.h"
 #include "flags.h"
 #include "opts.h"
+#include "esp.h" /* for --enable-esp support */
 
 #ifdef HAVE_MMAP_FILE
 # include <sys/mman.h>
@@ -822,7 +823,9 @@
 
 static const char *asm_debug;
 static const char *cpp_spec = CPP_SPEC;
+#ifndef ENABLE_ESP
 static const char *cc1_spec = CC1_SPEC;
+#endif
 static const char *cc1plus_spec = CC1PLUS_SPEC;
 static const char *link_gcc_c_sequence_spec = LINK_GCC_C_SEQUENCE_SPEC;
 static const char *link_ssp_spec = LINK_SSP_SPEC;
@@ -885,7 +888,7 @@
 static const char *cpp_options =
 "%(cpp_unique_options) %1 %{m*} %{std*&ansi&trigraphs} %{W*&pedantic*} %{w}\
  %{f*} %{g*:%{!g0:%{g*} %{!fno-working-directory:-fworking-directory}}} %{O*}\
- %{undef} %{save-temps*:-fpch-preprocess}";
+ %{undef} %{save-temps*:-fpch-preprocess} %(esp_cpp_options)";
 
 /* This contains cpp options which are not passed when the preprocessor
    output will be used by another program.  */
@@ -1075,15 +1078,15 @@
 	  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \
 		%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i} \n\
 		    cc1 -fpreprocessed %{save-temps*:%b.i} %{!save-temps*:%g.i} \
-			%(cc1_options)}\
+			%(cc1_options) %(esp_options)}\
 	  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\
-		cc1 %(cpp_unique_options) %(cc1_options)}}}\
+		cc1 %(cpp_unique_options) %(cc1_options) %(esp_options)}}}\
           %{!fsyntax-only:%(invoke_as)}} \
       %{combine:\
 	  %{save-temps*|traditional-cpp|no-integrated-cpp:%(trad_capable_cpp) \
 		%(cpp_options) -o %{save-temps*:%b.i} %{!save-temps*:%g.i}}\
 	  %{!save-temps*:%{!traditional-cpp:%{!no-integrated-cpp:\
-		cc1 %(cpp_unique_options) %(cc1_options)}}\
+		cc1 %(cpp_unique_options) %(cc1_options) %(esp_options)}}\
                 %{!fsyntax-only:%(invoke_as)}}}}}}", 0, 1, 1},
   {"-",
    "%{!E:%e-E or -x required when input is from standard input}\
@@ -1106,7 +1109,7 @@
                     %W{o*:--output-pch=%*}%V}}}}}}", 0, 0, 0},
   {".i", "@cpp-output", 0, 1, 0},
   {"@cpp-output",
-   "%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %{!fsyntax-only:%(invoke_as)}}}}", 0, 1, 0},
+   "%{!M:%{!MM:%{!E:cc1 -fpreprocessed %i %(cc1_options) %(esp_options) %{!fsyntax-only:%(invoke_as)}}}}", 0, 1, 0},
   {".s", "@assembler", 0, 1, 0},
   {"@assembler",
    "%{!M:%{!MM:%{!E:%{!S:as %(asm_debug) %(asm_options) %i %A }}}}", 0, 1, 0},
@@ -1699,18 +1702,23 @@
   INIT_STATIC_SPEC ("sysroot_hdrs_suffix_spec",	&sysroot_hdrs_suffix_spec),
 };
 
-#ifdef EXTRA_SPECS		/* additional specs needed */
+/* EXTRA_SPECS needs to be defined  */
+#ifndef EXTRA_SPECS
+#define EXTRA_SPECS
+#endif
+
+/* EXTRA_SPECS and ESP_EXTRA_SPECS add additional specs */
 /* Structure to keep track of just the first two args of a spec_list.
-   That is all that the EXTRA_SPECS macro gives us.  */
+   That is all that the EXTRA_SPECS and ESP_EXTRA_SPECS macro gives us.  */
 struct spec_list_1
 {
   const char *const name;
   const char *const ptr;
 };
 
-static const struct spec_list_1 extra_specs_1[] = { EXTRA_SPECS };
+/* ESP_EXTRA_SPECS before EXTRA_SPECS  */
+static const struct spec_list_1 extra_specs_1[] = { ESP_EXTRA_SPECS, EXTRA_SPECS };
 static struct spec_list *extra_specs = (struct spec_list *) 0;
-#endif
 
 /* List of dynamically allocates specs that have been defined so far.  */
 
@@ -1798,7 +1806,6 @@
   if (verbose_flag)
     notice ("Using built-in specs.\n");
 
-#ifdef EXTRA_SPECS
   extra_specs = XCNEWVEC (struct spec_list, ARRAY_SIZE (extra_specs_1));
 
   for (i = ARRAY_SIZE (extra_specs_1) - 1; i >= 0; i--)
@@ -1811,7 +1818,6 @@
       sl->ptr_spec = &sl->ptr;
       next = sl;
     }
-#endif
 
   for (i = ARRAY_SIZE (static_specs) - 1; i >= 0; i--)
     {
@@ -7111,6 +7117,12 @@
     gcc_exec_prefix = concat (gcc_exec_prefix, spec_machine, dir_separator_str,
 			      spec_version, dir_separator_str, NULL);
 
+#ifdef ENABLE_ESP
+  /* Process ESP_COMMAND_OPTIONS_SPEC, adding any new options to the end
+     of the command line.  */
+  do_self_spec (esp_command_options_spec);
+#endif
+
   /* Now we have the specs.
      Set the `valid' bits for switches that match anything in any spec.  */
 
diff -Nur gcc-4.5.1-vanilla/gcc/Makefile.in gcc-4.5.1/gcc/Makefile.in
--- gcc-4.5.1-vanilla/gcc/Makefile.in	2010-06-30 15:26:17.000000000 +0200
+++ gcc-4.5.1/gcc/Makefile.in	2010-10-30 15:13:15.822979675 +0200
@@ -640,13 +640,24 @@
 INHIBIT_LIBC_CFLAGS = -Dinhibit_libc
 endif
 
+# We don't want __stack_chk_fail in crt* and libgcc2.a.
+# We don't want to compile crtbegin, crtend and crtbeginT with -fPIE.
+enable_esp = @enable_esp@
+ifeq ($(enable_esp),yes)
+ESP_NOPIE_CFLAGS = -fno-PIE
+ESP_NOSSP_CFLAGS = -fno-stack-protector
+else
+ESP_NOPIE_CFLAGS=
+ESP_NOSSP_CFLAGS=
+endif
+
 # Options to use when compiling libgcc2.a.
 #
 LIBGCC2_DEBUG_CFLAGS = -g
 LIBGCC2_CFLAGS = -O2 $(LIBGCC2_INCLUDES) $(GCC_CFLAGS) $(TARGET_LIBGCC2_CFLAGS) \
 		 $(LIBGCC2_DEBUG_CFLAGS) $(GTHREAD_FLAGS) \
 		 -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED \
-		 $(INHIBIT_LIBC_CFLAGS)
+		 $(INHIBIT_LIBC_CFLAGS) $(ESP_NOSSP_CFLAGS)
 
 # Additional options to use when compiling libgcc2.a.
 # Some targets override this to -isystem include
@@ -659,7 +670,7 @@
 CRTSTUFF_CFLAGS = -O2 $(GCC_CFLAGS) $(INCLUDES) $(MULTILIB_CFLAGS) -g0 \
   -finhibit-size-directive -fno-inline -fno-exceptions \
   -fno-zero-initialized-in-bss -fno-toplevel-reorder -fno-tree-vectorize \
-  $(INHIBIT_LIBC_CFLAGS)
+  $(INHIBIT_LIBC_CFLAGS) $(ESP_NOSSP_CFLAGS)
 
 # Additional sources to handle exceptions; overridden by targets as needed.
 LIB2ADDEH = $(srcdir)/unwind-dw2.c $(srcdir)/unwind-dw2-fde.c \
@@ -689,6 +700,12 @@
 # The rules for compiling them should be in the t-* file for the machine.
 EXTRA_PARTS = @extra_parts@
 
+# We add crtbeginTS.o to the EXTRA_PARTS list if enable_crtbeginTS = yes
+enable_crtbeginTS = @enable_crtbeginTS@
+ifeq ($(enable_crtbeginTS),yes)
+EXTRA_PARTS += crtbeginTS.o
+endif
+
 # List of extra object files that should be compiled and linked with
 # compiler proper (cc1, cc1obj, cc1plus).
 EXTRA_OBJS = @extra_objs@
@@ -1867,9 +1884,10 @@
 	echo LIBGCC_SYNC = '$(LIBGCC_SYNC)' >> tmp-libgcc.mvars
 	echo LIBGCC_SYNC_CFLAGS = '$(LIBGCC_SYNC_CFLAGS)' >> tmp-libgcc.mvars
 	echo CRTSTUFF_CFLAGS = '$(CRTSTUFF_CFLAGS)' >> tmp-libgcc.mvars
-	echo CRTSTUFF_T_CFLAGS = '$(CRTSTUFF_T_CFLAGS)' >> tmp-libgcc.mvars
+	echo CRTSTUFF_T_CFLAGS = '$(CRTSTUFF_T_CFLAGS) $(ESP_NOPIE_CFLAGS)' >> tmp-libgcc.mvars
 	echo CRTSTUFF_T_CFLAGS_S = '$(CRTSTUFF_T_CFLAGS_S)' >> tmp-libgcc.mvars
 	echo TARGET_SYSTEM_ROOT = '$(TARGET_SYSTEM_ROOT)' >> tmp-libgcc.mvars
+	echo enable_crtbeginTS = '$(enable_crtbeginTS)' >> tmp-libgcc.mvars
 
 	mv tmp-libgcc.mvars libgcc.mvars
 
@@ -1903,12 +1921,14 @@
 $(T)crtbegin.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \
   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)
 	$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \
+	$(ESP_NOPIE_CFLAGS) \
 	  -c $(srcdir)/crtstuff.c -DCRT_BEGIN \
 	  -o $(T)crtbegin$(objext)
 
 $(T)crtend.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \
   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)
 	$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \
+	$(ESP_NOPIE_CFLAGS) \
 	  -c $(srcdir)/crtstuff.c -DCRT_END \
 	  -o $(T)crtend$(objext)
 
@@ -1929,9 +1949,19 @@
 $(T)crtbeginT.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \
   gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)
 	$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS) \
+	$(ESP_NOPIE_CFLAGS) \
 	  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O \
 	  -o $(T)crtbeginT$(objext)
 
+# This is a version of crtbegin for -static -fPIE links if esp is enable.
+ifeq ($(enable_crtbeginTS),yes)
+$(T)crtbeginTS.o: crtstuff.c $(GCC_PASSES) $(TCONFIG_H) auto-host.h \
+  gbl-ctors.h stmp-int-hdrs tsystem.h coretypes.h $(TM_H)
+	$(GCC_FOR_TARGET) $(CRTSTUFF_CFLAGS) $(CRTSTUFF_T_CFLAGS_S) \
+	  -c $(srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O -DCRTSTUFFS_O \
+	  -o $(T)crtbeginTS$(objext)
+endif
+
 # Compile the start modules crt0.o and mcrt0.o that are linked with
 # every program
 $(T)crt0.o: s-crt0 ; @true
diff -Nur gcc-4.5.1-vanilla/gcc/objc/lang-specs.h gcc-4.5.1/gcc/objc/lang-specs.h
--- gcc-4.5.1-vanilla/gcc/objc/lang-specs.h	2007-08-02 12:37:36.000000000 +0200
+++ gcc-4.5.1/gcc/objc/lang-specs.h	2010-10-30 15:13:15.851989223 +0200
@@ -30,13 +30,13 @@
 	%{traditional|ftraditional|traditional-cpp:\
 %eGNU Objective C no longer supports traditional compilation}\
 	%{save-temps|no-integrated-cpp:cc1obj -E %(cpp_options) -o %{save-temps:%b.mi} %{!save-temps:%g.mi} \n\
-	    cc1obj -fpreprocessed %{save-temps:%b.mi} %{!save-temps:%g.mi} %(cc1_options) %{print-objc-runtime-info} %{gen-decls}}\
+	    cc1obj -fpreprocessed %{save-temps:%b.mi} %{!save-temps:%g.mi} %(cc1_options) %(esp_options) %{print-objc-runtime-info} %{gen-decls}}\
 	%{!save-temps:%{!no-integrated-cpp:\
-	    cc1obj %(cpp_unique_options) %(cc1_options) %{print-objc-runtime-info} %{gen-decls}}}\
+	    cc1obj %(cpp_unique_options) %(cc1_options) %(esp_options) %{print-objc-runtime-info} %{gen-decls}}}\
         %{!fsyntax-only:%(invoke_as)}}}}", 0, 0, 0},
   {".mi", "@objc-cpp-output", 0, 0, 0},
   {"@objc-cpp-output",
-     "%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %{print-objc-runtime-info} %{gen-decls}\
+     "%{!M:%{!MM:%{!E:cc1obj -fpreprocessed %i %(cc1_options) %(esp_options) %{print-objc-runtime-info} %{gen-decls}\
 			     %{!fsyntax-only:%(invoke_as)}}}}", 0, 0, 0},
   {"@objective-c-header",
      "%{E|M|MM:cc1obj -E %{traditional|ftraditional|traditional-cpp:-traditional-cpp}\
@@ -45,10 +45,10 @@
 	%{traditional|ftraditional|traditional-cpp:\
 %eGNU Objective C no longer supports traditional compilation}\
 	%{save-temps|no-integrated-cpp:cc1obj -E %(cpp_options) -o %{save-temps:%b.mi} %{!save-temps:%g.mi} \n\
-	    cc1obj -fpreprocessed %b.mi %(cc1_options) %{print-objc-runtime-info} %{gen-decls}\
+	    cc1obj -fpreprocessed %b.mi %(cc1_options) %(esp_options) %{print-objc-runtime-info} %{gen-decls}\
                         -o %g.s %{!o*:--output-pch=%i.gch}\
                         %W{o*:--output-pch=%*}%V}\
 	%{!save-temps:%{!no-integrated-cpp:\
-	    cc1obj %(cpp_unique_options) %(cc1_options) %{print-objc-runtime-info} %{gen-decls}\
+	    cc1obj %(cpp_unique_options) %(cc1_options) %(esp_options) %{print-objc-runtime-info} %{gen-decls}\
                         -o %g.s %{!o*:--output-pch=%i.gch}\
                         %W{o*:--output-pch=%*}%V}}}}}", 0, 0, 0},
diff -Nur gcc-4.5.1-vanilla/gcc/objcp/lang-specs.h gcc-4.5.1/gcc/objcp/lang-specs.h
--- gcc-4.5.1-vanilla/gcc/objcp/lang-specs.h	2007-08-02 12:38:44.000000000 +0200
+++ gcc-4.5.1/gcc/objcp/lang-specs.h	2010-10-30 15:13:15.852989302 +0200
@@ -36,7 +36,7 @@
 		%(cpp_options) %2 -o %{save-temps:%b.mii} %{!save-temps:%g.mii} \n}\
       cc1objplus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.mii} %{!save-temps:%g.mii}}\
 	      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\
-	%(cc1_options) %2 %{+e1*}\
+	%(cc1_options) %(esp_options) %2 %{+e1*}\
         -o %g.s %{!o*:--output-pch=%i.gch} %W{o*:--output-pch=%*}%V}}}",
      CPLUSPLUS_CPP_SPEC, 0, 0},
   {"@objective-c++",
@@ -46,15 +46,15 @@
 		%(cpp_options) %2 -o %{save-temps:%b.mii} %{!save-temps:%g.mii} \n}\
       cc1objplus %{save-temps|no-integrated-cpp:-fpreprocessed %{save-temps:%b.mii} %{!save-temps:%g.mii}}\
 	      %{!save-temps:%{!no-integrated-cpp:%(cpp_unique_options)}}\
-	%(cc1_options) %2 %{+e1*}\
+	%(cc1_options) %(esp_options) %2 %{+e1*}\
        %{!fsyntax-only:%(invoke_as)}}}}",
      CPLUSPLUS_CPP_SPEC, 0, 0},
   {".mii", "@objective-c++-cpp-output", 0, 0, 0},
   {"@objective-c++-cpp-output",
    "%{!M:%{!MM:%{!E:\
-    cc1objplus -fpreprocessed %i %(cc1_options) %2 %{+e*}\
+    cc1objplus -fpreprocessed %i %(cc1_options) %(esp_options) %2 %{+e*}\
     %{!fsyntax-only:%(invoke_as)}}}}", 0, 0, 0},
   {"@objc++-cpp-output",
    "%{!M:%{!MM:%{!E:\
-    cc1objplus -fpreprocessed %i %(cc1_options) %2 %{+e*}\
+    cc1objplus -fpreprocessed %i %(cc1_options) %(esp_options) %2 %{+e*}\
     %{!fsyntax-only:%(invoke_as)}}}}", 0, 0, 0},
diff -Nur gcc-4.5.1-vanilla/gcc/varasm.c gcc-4.5.1/gcc/varasm.c
--- gcc-4.5.1-vanilla/gcc/varasm.c	2010-03-27 12:56:30.000000000 +0100
+++ gcc-4.5.1/gcc/varasm.c	2010-10-30 15:13:15.839995541 +0200
@@ -5961,7 +5961,11 @@
   bool is_local;
 
   is_local = targetm.binds_local_p (decl);
-  if (!flag_shlib)
+  #ifdef ENABLE_ESP
+    if (!flag_pic)
+  #else
+    if (!flag_shlib)
+  #endif
     {
       if (is_local)
 	kind = TLS_MODEL_LOCAL_EXEC;
diff -Nur gcc-4.5.1-vanilla/libgcc/Makefile.in gcc-4.5.1/libgcc/Makefile.in
--- gcc-4.5.1-vanilla/libgcc/Makefile.in	2010-03-30 15:08:52.000000000 +0200
+++ gcc-4.5.1/libgcc/Makefile.in	2010-10-30 15:13:15.824991986 +0200
@@ -291,6 +291,12 @@
 gen-hide-list = echo > \$@
 endif
 
+# We add crtbeginTS.o to the EXTRA_PARTS list if enable_crtbeginTS = yes
+enable_libgcc_crtbeginTS = $(enable_crtbeginTS)
+ifeq ($(enable_libgcc_crtbeginTS),yes)
+EXTRA_PARTS += crtbeginTS.o
+endif
+
 ifneq ($(EXTRA_PARTS),)
   extra-parts = libgcc-extra-parts
   INSTALL_PARTS = $(EXTRA_PARTS)
@@ -842,6 +848,13 @@
 crtbeginT.o: $(gcc_srcdir)/crtstuff.c
 	$(crt_compile) $(CRTSTUFF_T_CFLAGS) \
 	  -c $(gcc_srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O
+
+# This is a version of crtbegin for -static -fPIE links.
+ifeq ($(enable_libgcc_crtbeginTS),yes)
+crtbeginTS.o: $(gcc_srcdir)/crtstuff.c
+	$(crt_compile) $(CRTSTUFF_T_CFLAGS_S) \
+	  -c $(gcc_srcdir)/crtstuff.c -DCRT_BEGIN -DCRTSTUFFT_O -DCRTSTUFFS_O
+endif
 endif
 
 # Build extra startfiles in the libgcc directory.
diff -Nur gcc-4.5.1-vanilla/libmudflap/configure gcc-4.5.1/libmudflap/configure
--- gcc-4.5.1-vanilla/libmudflap/configure	2010-06-10 10:58:13.000000000 +0200
+++ gcc-4.5.1/libmudflap/configure	2010-10-30 15:13:15.768230485 +0200
@@ -652,6 +652,7 @@
 MAINTAINER_MODE_FALSE
 MAINTAINER_MODE_TRUE
 am__untar
+enable_esp
 am__tar
 AMTAR
 am__leading_dot
diff -Nur gcc-4.5.1-vanilla/libmudflap/Makefile.in gcc-4.5.1/libmudflap/Makefile.in
--- gcc-4.5.1-vanilla/libmudflap/Makefile.in	2010-04-02 20:18:06.000000000 +0200
+++ gcc-4.5.1/libmudflap/Makefile.in	2010-10-30 15:13:15.826989769 +0200
@@ -304,9 +304,17 @@
 MAINT_CHARSET = latin1
 SUBDIRS = testsuite
 
+# Some stuff don't compile with SSP and FORTIFY_SOURCE
+enable_esp = @enable_esp@
+ifeq ($(enable_esp),yes)
+	NO_ESP_CFLAGS = -fno-stack-protector -U_FORTIFY_SOURCE
+else
+	NO_ESP_CFLAGS =
+endif
+
 # May be used by various substitution variables.
 gcc_version := $(shell cat $(top_srcdir)/../gcc/BASE-VER)
-AM_CFLAGS = -Wall $(SECTION_FLAGS)
+AM_CFLAGS = -Wall $(SECTION_FLAGS) $(NO_ESP_CFLAGS)
 @LIBMUDFLAPTH_FALSE@libmudflapth = 
 @LIBMUDFLAPTH_TRUE@libmudflapth = libmudflapth.la
 toolexeclib_LTLIBRARIES = libmudflap.la $(libmudflapth)
diff -Nur gcc-4.5.1-vanilla/Makefile.in gcc-4.5.1/Makefile.in
--- gcc-4.5.1-vanilla/Makefile.in	2010-06-10 19:05:59.000000000 +0200
+++ gcc-4.5.1/Makefile.in	2010-10-30 15:13:15.816979901 +0200
@@ -350,9 +350,17 @@
 BUILD_PREFIX = @BUILD_PREFIX@
 BUILD_PREFIX_1 = @BUILD_PREFIX_1@
 
+# Some stuff don't compile with SSP
+enable_esp = @enable_esp@
+ifeq ($(enable_esp),yes)
+ESP_NOSSP_CFLAGS = -fno-stack-protector
+else
+ESP_NOSSP_CFLAGS=
+endif
+
 # Flags to pass to stage2 and later makes.  They are defined
 # here so that they can be overridden by Makefile fragments.
-BOOT_CFLAGS= -g -O2
+BOOT_CFLAGS= -g -O2 $(ESP_NOSSP_CFLAGS)
 BOOT_LDFLAGS=
 BOOT_ADAFLAGS=-gnatpg -gnata
 
@@ -397,9 +405,9 @@
 
 CFLAGS = @CFLAGS@
 LDFLAGS = @LDFLAGS@
-LIBCFLAGS = $(CFLAGS)
+LIBCFLAGS = $(CFLAGS) $(ESP_NOSSP_CFLAGS)
 CXXFLAGS = @CXXFLAGS@
-LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates
+LIBCXXFLAGS = $(CXXFLAGS) -fno-implicit-templates $(ESP_NOSSP_CFLAGS)
 
 TFLAGS =
 
