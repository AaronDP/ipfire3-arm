diff -Naur binutils-2.19.50.orig/bfd/elf-bfd.h binutils-2.19.50/bfd/elf-bfd.h
--- binutils-2.19.50.orig/bfd/elf-bfd.h	2008-08-20 23:28:58.000000000 +0000
+++ binutils-2.19.50/bfd/elf-bfd.h	2008-10-05 02:03:46.000000000 +0000
@@ -1526,6 +1526,9 @@
   /* Segment flags for the PT_GNU_STACK segment.  */
   unsigned int stack_flags;
 
+  /* Segment flags for the PT_PAX_FLAGS segment.  */
+  unsigned int pax_flags;
+
   /* Symbol version definitions in external objects.  */
   Elf_Internal_Verdef *verdef;
 
diff -Naur binutils-2.19.50.orig/bfd/elf.c binutils-2.19.50/bfd/elf.c
--- binutils-2.19.50.orig/bfd/elf.c	2008-10-03 09:40:48.000000000 +0000
+++ binutils-2.19.50/bfd/elf.c	2008-10-05 02:03:46.000000000 +0000
@@ -1136,6 +1136,7 @@
     case PT_GNU_EH_FRAME: pt = "EH_FRAME"; break;
     case PT_GNU_STACK: pt = "STACK"; break;
     case PT_GNU_RELRO: pt = "RELRO"; break;
+    case PT_PAX_FLAGS: pt = "PAX_FLAGS"; break;
     default: pt = NULL; break;
     }
   return pt;
@@ -2436,6 +2437,9 @@
     case PT_GNU_RELRO:
       return _bfd_elf_make_section_from_phdr (abfd, hdr, index, "relro");
 
+    case PT_PAX_FLAGS:
+      return _bfd_elf_make_section_from_phdr (abfd, hdr, index, "pax_flags");
+
     default:
       /* Check for any processor-specific program segment types.  */
       bed = get_elf_backend_data (abfd);
@@ -3429,6 +3433,11 @@
       ++segs;
     }
 
+    {
+      /* We need a PT_PAX_FLAGS segment.  */
+      ++segs;
+    }
+
   for (s = abfd->sections; s != NULL; s = s->next)
     {
       if ((s->flags & SEC_LOAD) != 0
@@ -4008,6 +4017,20 @@
 	    }
 	}
 
+    {
+      amt = sizeof (struct elf_segment_map);
+      m = bfd_zalloc (abfd, amt);
+      if (m == NULL)
+	goto error_return;
+      m->next = NULL;
+      m->p_type = PT_PAX_FLAGS;
+      m->p_flags = elf_tdata (abfd)->pax_flags;
+      m->p_flags_valid = 1;
+
+      *pm = m;
+      pm = &m->next;
+    }
+
       free (sections);
       elf_tdata (abfd)->segment_map = mfirst;
     }
@@ -5205,7 +5228,8 @@
        6. PT_TLS segment includes only SHF_TLS sections.
        7. SHF_TLS sections are only in PT_TLS or PT_LOAD segments.
        8. PT_DYNAMIC should not contain empty sections at the beginning
-	  (with the possible exception of .dynamic).  */
+	  (with the possible exception of .dynamic).
+       9. PT_PAX_FLAGS segments does not include any sections.  */
 #define IS_SECTION_IN_INPUT_SEGMENT(section, segment, bed)		\
   ((((segment->p_paddr							\
       ? IS_CONTAINED_BY_LMA (section, segment, segment->p_paddr)	\
@@ -5213,6 +5237,7 @@
      && (section->flags & SEC_ALLOC) != 0)				\
     || IS_NOTE (segment, section))					\
    && segment->p_type != PT_GNU_STACK					\
+   && segment->p_type != PT_PAX_FLAGS					\
    && (segment->p_type != PT_TLS					\
        || (section->flags & SEC_THREAD_LOCAL))				\
    && (segment->p_type == PT_LOAD					\
diff -Naur binutils-2.19.50.orig/bfd/elflink.c binutils-2.19.50/bfd/elflink.c
--- binutils-2.19.50.orig/bfd/elflink.c	2008-10-03 09:40:48.000000000 +0000
+++ binutils-2.19.50/bfd/elflink.c	2008-10-05 02:03:46.000000000 +0000
@@ -5413,16 +5413,30 @@
     return TRUE;
 
   bed = get_elf_backend_data (output_bfd);
+  elf_tdata (output_bfd)->pax_flags = PF_NORANDEXEC;
+
+  if (info->execheap)
+    elf_tdata (output_bfd)->pax_flags |= PF_NOMPROTECT;
+  else if (info->noexecheap)
+    elf_tdata (output_bfd)->pax_flags |= PF_MPROTECT;
+
   if (info->execstack)
-    elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+    {
+      elf_tdata (output_bfd)->stack_flags = PF_R | PF_W | PF_X;
+      elf_tdata (output_bfd)->pax_flags |= PF_EMUTRAMP;
+    }
   else if (info->noexecstack)
-    elf_tdata (output_bfd)->stack_flags = PF_R | PF_W;
+    {
+      elf_tdata (output_bfd)->stack_flags = PF_R | PF_W;
+      elf_tdata (output_bfd)->pax_flags |= PF_NOEMUTRAMP;
+    }
   else
     {
       bfd *inputobj;
       asection *notesec = NULL;
       int exec = 0;
 
+      elf_tdata (output_bfd)->pax_flags |= PF_NOEMUTRAMP;
       for (inputobj = info->input_bfds;
 	   inputobj;
 	   inputobj = inputobj->link_next)
@@ -5435,7 +5449,11 @@
 	  if (s)
 	    {
 	      if (s->flags & SEC_CODE)
-		exec = PF_X;
+		{
+		  elf_tdata (output_bfd)->pax_flags &= ~PF_NOEMUTRAMP;
+		  elf_tdata (output_bfd)->pax_flags |= PF_EMUTRAMP;
+		  exec = PF_X;
+		}
 	      notesec = s;
 	    }
 	  else if (bed->default_execstack)
diff -Naur binutils-2.19.50.orig/binutils/readelf.c binutils-2.19.50/binutils/readelf.c
--- binutils-2.19.50.orig/binutils/readelf.c	2008-09-17 07:50:28.000000000 +0000
+++ binutils-2.19.50/binutils/readelf.c	2008-10-05 02:03:46.000000000 +0000
@@ -2505,6 +2505,7 @@
 			return "GNU_EH_FRAME";
     case PT_GNU_STACK:	return "GNU_STACK";
     case PT_GNU_RELRO:  return "GNU_RELRO";
+    case PT_PAX_FLAGS:  return "PAX_FLAGS";
 
     default:
       if ((p_type >= PT_LOPROC) && (p_type <= PT_HIPROC))
diff -Naur binutils-2.19.50.orig/include/bfdlink.h binutils-2.19.50/include/bfdlink.h
--- binutils-2.19.50.orig/include/bfdlink.h	2008-08-17 03:12:50.000000000 +0000
+++ binutils-2.19.50/include/bfdlink.h	2008-10-05 02:03:46.000000000 +0000
@@ -319,6 +319,14 @@
   /* TRUE if PT_GNU_RELRO segment should be created.  */
   unsigned int relro: 1;
 
+  /* TRUE if PT_PAX_FLAGS segment should be created with PF_NOMPROTECT
+     flags.  */
+  unsigned int execheap: 1;
+
+  /* TRUE if PT_PAX_FLAGS segment should be created with PF_MPROTECT
+     flags.  */
+  unsigned int noexecheap: 1;
+
   /* TRUE if we should warn when adding a DT_TEXTREL to a shared object.  */
   unsigned int warn_shared_textrel: 1;
 
diff -Naur binutils-2.19.50.orig/include/elf/common.h binutils-2.19.50/include/elf/common.h
--- binutils-2.19.50.orig/include/elf/common.h	2008-08-03 23:20:42.000000000 +0000
+++ binutils-2.19.50/include/elf/common.h	2008-10-05 02:04:51.000000000 +0000
@@ -360,6 +360,7 @@
 #define PT_SUNW_EH_FRAME PT_GNU_EH_FRAME      /* Solaris uses the same value */
 #define PT_GNU_STACK	(PT_LOOS + 0x474e551) /* Stack flags */
 #define PT_GNU_RELRO	(PT_LOOS + 0x474e552) /* Read-only after relocation */
+#define PT_PAX_FLAGS	(PT_LOOS + 0x5041580) /* PaX flags */
 
 /* Program segment permissions, in program header p_flags field.  */
 
@@ -370,6 +371,21 @@
 #define PF_MASKOS	0x0FF00000	/* New value, Oct 4, 1999 Draft */
 #define PF_MASKPROC	0xF0000000	/* Processor-specific reserved bits */
 
+/* Flags to control PaX behavior.  */
+
+#define PF_PAGEEXEC	(1 << 4)	/* Enable  PAGEEXEC */
+#define PF_NOPAGEEXEC	(1 << 5)	/* Disable PAGEEXEC */
+#define PF_SEGMEXEC	(1 << 6)	/* Enable  SEGMEXEC */
+#define PF_NOSEGMEXEC	(1 << 7)	/* Disable SEGMEXEC */
+#define PF_MPROTECT	(1 << 8)	/* Enable  MPROTECT */
+#define PF_NOMPROTECT	(1 << 9)	/* Disable MPROTECT */
+#define PF_RANDEXEC	(1 << 10)	/* Enable  RANDEXEC */
+#define PF_NORANDEXEC	(1 << 11)	/* Disable RANDEXEC */
+#define PF_EMUTRAMP	(1 << 12)	/* Enable  EMUTRAMP */
+#define PF_NOEMUTRAMP	(1 << 13)	/* Disable EMUTRAMP */
+#define PF_RANDMMAP	(1 << 14)	/* Enable  RANDMMAP */
+#define PF_NORANDMMAP	(1 << 15)	/* Disable RANDMMAP */
+
 /* Values for section header, sh_type field.  */
 
 #define SHT_NULL	0		/* Section header table entry unused */
diff -Naur binutils-2.19.50.orig/ld/emultempl/elf32.em binutils-2.19.50/ld/emultempl/elf32.em
--- binutils-2.19.50.orig/ld/emultempl/elf32.em	2008-10-03 09:40:49.000000000 +0000
+++ binutils-2.19.50/ld/emultempl/elf32.em	2008-10-05 02:03:46.000000000 +0000
@@ -2123,6 +2123,16 @@
 	  link_info.noexecstack = TRUE;
 	  link_info.execstack = FALSE;
 	}
+      else if (strcmp (optarg, "execheap") == 0)
+	{
+	  link_info.execheap = TRUE;
+	  link_info.noexecheap = FALSE;
+	}
+      else if (strcmp (optarg, "noexecheap") == 0)
+	{
+	  link_info.noexecheap = TRUE;
+	  link_info.execheap = FALSE;
+	}
 EOF
 
   if test -n "$COMMONPAGESIZE"; then
@@ -2206,6 +2216,8 @@
   fprintf (file, _("\
   -z execstack                Mark executable as requiring executable stack\n"));
   fprintf (file, _("\
+  -z execheap                 Mark executable as requiring executable heap\n"));
+  fprintf (file, _("\
   -z initfirst                Mark DSO to be initialized first at runtime\n"));
   fprintf (file, _("\
   -z interpose                Mark object to interpose all DSOs but executable\n"));
@@ -2229,6 +2241,8 @@
   -z nodump                   Mark DSO not available to dldump\n"));
   fprintf (file, _("\
   -z noexecstack              Mark executable as not requiring executable stack\n"));
+  fprintf (file, _("\
+  -z noexecheap               Mark executable as not requiring executable heap\n"));
 EOF
 
   if test -n "$COMMONPAGESIZE"; then
diff -Naur binutils-2.19.50.orig/ld/ldgram.y binutils-2.19.50/ld/ldgram.y
--- binutils-2.19.50.orig/ld/ldgram.y	2008-07-06 13:38:36.000000000 +0000
+++ binutils-2.19.50/ld/ldgram.y	2008-10-05 02:03:46.000000000 +0000
@@ -1112,6 +1112,8 @@
 			    $$ = exp_intop (0x6474e550);
 			  else if (strcmp (s, "PT_GNU_STACK") == 0)
 			    $$ = exp_intop (0x6474e551);
+			  else if (strcmp (s, "PT_PAX_FLAGS") == 0)
+			    $$ = exp_intop (0x65041580);
 			  else
 			    {
 			      einfo (_("\
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-elf/seg.d binutils-2.19.50/ld/testsuite/ld-elf/seg.d
--- binutils-2.19.50.orig/ld/testsuite/ld-elf/seg.d	2008-02-22 23:10:45.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-elf/seg.d	2008-10-05 02:03:46.000000000 +0000
@@ -10,6 +10,7 @@
 #...
   LOAD           .*
   LOAD           0x0*001000 0xf*fffff000 0xf*fffff000 0x0*1000 0x0*1000 .*
+  PAX_FLAGS      0x000000 0x00000000 0x00000000 0x00000 0x00000     0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -17,3 +18,4 @@
 # On MIPS, the first segment is for .reginfo.
 #...
    0.     reset boot 
+   02     
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/hidden2.d binutils-2.19.50/ld/testsuite/ld-i386/hidden2.d
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/hidden2.d	2008-03-16 22:26:23.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/hidden2.d	2008-10-05 02:03:46.000000000 +0000
@@ -8,6 +8,6 @@
 Disassembly of section .text:
 
 [a-f0-9]+ <bar>:
-[ 	]*[a-f0-9]+:	e8 cf fe ff ff       	call   0 <bar-0x[a-f0-9]+>
+[ 	]*[a-f0-9]+:	e8 af fe ff ff       	call   0 <bar-0x[a-f0-9]+>
 [ 	]*[a-f0-9]+:	c3                   	ret    
 #pass
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsbin.rd binutils-2.19.50/ld/testsuite/ld-i386/tlsbin.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsbin.rd	2007-09-30 01:33:14.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsbin.rd	2008-10-05 02:03:46.000000000 +0000
@@ -44,6 +44,7 @@
   LOAD.*
   DYNAMIC.*
   TLS +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x0+60 0x0+a0 R +0x1000
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -53,6 +54,7 @@
    03 +.tdata .dynamic .got .got.plt *
    04 +.dynamic *
    05 +.tdata .tbss *
+   06 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 9 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsbindesc.rd binutils-2.19.50/ld/testsuite/ld-i386/tlsbindesc.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsbindesc.rd	2008-07-28 18:07:05.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsbindesc.rd	2008-10-05 02:03:46.000000000 +0000
@@ -42,6 +42,7 @@
   LOAD.*
   DYNAMIC.*
   TLS +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x0+60 0x0+a0 R +0x1000
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -51,6 +52,7 @@
    03 +.tdata .dynamic .got .got.plt *
    04 +.dynamic *
    05 +.tdata .tbss *
+   06 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 9 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsdesc.rd binutils-2.19.50/ld/testsuite/ld-i386/tlsdesc.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsdesc.rd	2007-09-30 01:33:14.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsdesc.rd	2008-10-05 02:03:46.000000000 +0000
@@ -39,6 +39,7 @@
   LOAD.*
   DYNAMIC.*
   TLS +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x0+60 0x0+80 R +0x1
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -46,6 +47,7 @@
    01 +.tdata .dynamic .got .got.plt *
    02 +.dynamic *
    03 +.tdata .tbss *
+   04 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 20 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsdesc.sd binutils-2.19.50/ld/testsuite/ld-i386/tlsdesc.sd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsdesc.sd	2006-10-17 13:41:48.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsdesc.sd	2008-10-05 02:03:46.000000000 +0000
@@ -14,7 +14,7 @@
  [0-9a-f]+ 6c000000 b4ffffff 4c000000 68000000  .*
  [0-9a-f]+ 50000000 70000000 00000000 bcffffff  .*
 Contents of section \.got\.plt:
- [0-9a-f]+ b0150000 00000000 00000000 00000000  .*
+ [0-9a-f]+ d0150000 00000000 00000000 00000000  .*
  [0-9a-f]+ 20000000 00000000 60000000 00000000  .*
  [0-9a-f]+ 00000000 00000000 00000000 00000000  .*
  [0-9a-f]+ 40000000 +.*
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsgdesc.rd binutils-2.19.50/ld/testsuite/ld-i386/tlsgdesc.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsgdesc.rd	2007-09-30 01:33:14.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsgdesc.rd	2008-10-05 02:03:46.000000000 +0000
@@ -36,12 +36,14 @@
   LOAD.*
   LOAD.*
   DYNAMIC.*
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
    00 +.hash .dynsym .dynstr .rel.dyn .rel.plt .plt .text *
    01 +.dynamic .got .got.plt *
    02 +.dynamic *
+   03 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 8 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsnopic.rd binutils-2.19.50/ld/testsuite/ld-i386/tlsnopic.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlsnopic.rd	2007-09-30 01:33:14.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlsnopic.rd	2008-10-05 02:03:46.000000000 +0000
@@ -37,6 +37,7 @@
   LOAD.*
   DYNAMIC.*
   TLS +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x0+ 0x0+24 R +0x1
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -44,6 +45,7 @@
    01 +.dynamic .got .got.plt *
    02 +.dynamic *
    03 +.tbss *
+   04 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 20 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-i386/tlspic.rd binutils-2.19.50/ld/testsuite/ld-i386/tlspic.rd
--- binutils-2.19.50.orig/ld/testsuite/ld-i386/tlspic.rd	2007-09-30 01:33:14.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-i386/tlspic.rd	2008-10-05 02:03:46.000000000 +0000
@@ -40,6 +40,7 @@
   LOAD.*
   DYNAMIC.*
   TLS +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x0+60 0x0+80 R +0x1
+  PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
   Segment Sections...
@@ -47,6 +48,7 @@
    01 +.tdata .dynamic .got .got.plt *
    02 +.dynamic *
    03 +.tdata .tbss *
+   04 *
 
 Relocation section '.rel.dyn' at offset 0x[0-9a-f]+ contains 26 entries:
  Offset +Info +Type +Sym.Value +Sym. Name
diff -Naur binutils-2.19.50.orig/ld/testsuite/ld-scripts/empty-aligned.d binutils-2.19.50/ld/testsuite/ld-scripts/empty-aligned.d
--- binutils-2.19.50.orig/ld/testsuite/ld-scripts/empty-aligned.d	2005-08-18 07:51:07.000000000 +0000
+++ binutils-2.19.50/ld/testsuite/ld-scripts/empty-aligned.d	2008-10-05 02:03:46.000000000 +0000
@@ -7,7 +7,9 @@
 Program Headers:
  +Type +Offset +VirtAddr +PhysAddr +FileSiz +MemSiz +Flg +Align
  +LOAD +0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ 0x[0-9a-f]+ [RWE ]+ +0x[0-9a-f]+
+ +PAX_FLAGS +0x000000 0x00000000 0x00000000 0x00000 0x00000 +0x4
 
  Section to Segment mapping:
  +Segment Sections\.\.\.
  +00 +.text 
+ +01 +
