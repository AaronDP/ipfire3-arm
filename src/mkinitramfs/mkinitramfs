#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2008, 2009  Michael Tremer & Christian Schmidt                #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /usr/lib/mkinitramfs/functions

# Add usb support
MODULES="$MODULES ehci-hcd ohci-hcd uhci-hcd"

# Get rootfs and options
rootdev=$(awk '/^[ \t]*[^#]/ { if ($2 == "/") { print $1; }}' /etc/fstab)
rootfs=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $3; }}' /etc/fstab)
rootopts=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $4; }}' /etc/fstab)
[ -z "$rootopts" ] && rootopts="defaults"

installmodule --load $rootfs

if [[ "$rootdev" =~ "^(UUID=|LABEL=)" ]]; then
	rootdev=$(resolve_device_name "$rootdev")
fi

rootopts=$(echo $rootopts | sed -e 's/^r[ow],//' -e 's/,_netdev//' \
	-e 's/_netdev//' -e 's/,r[ow],$//' -e 's/,r[ow],/,/' \
	-e 's/^r[ow]$/defaults/' -e 's/$/,ro/')
physdev=$(findblockdevinsys "$rootdev")
physdev=${physdev##*/dev/}
if [ -n "$physdev" ]; then
	vecho "[INFO] Found root device $physdev for $rootdev"
else
	physdev="$rootdev"
fi

if [ -n "$physdev" -a "$physdev" != "$rootdev" ]; then
	findstoragedriver ${physdev##/dev/}
fi

findstoragedriver ${rootdev##/dev/}

cat >> sbin/real-init <<EOF

#rootdev=$rootdev
#rootfstype=$rootfs
#rootopts=$rootopts
EOF

cat >> sbin/real-init <<'EOF'

# Users can override rootfs target on the kernel commandline
for o in $(cat /proc/cmdline); do
	case $o in
	root=*)
		rootdev=${o#root=}
		;;
	rootflags=*)
		rootflags=${o#rootflags=}
		;;
	rootfstype=*)
		rootfstype=${o#rootfstype=}
		;;
	esac
done

vecho "Starting udevd..."
udevd --daemon

vecho "Creating devices..."
udevadm trigger

vecho "Mounting root filesystem $rootdev..."
[ -n "$rootopts"   ] && rootopts="-o $rootopts"
[ -n "$rootfstype" ] && rootopts="-t $rootfstype $rootopts"
mount $rootdev /sysroot $rootopts

kill $(pidof udevd)

vecho "Switching to new root and running init..."
exec switchroot $(get_verbose) /sysroot

echo exec switchroot failed...
bash
EOF

finalize
