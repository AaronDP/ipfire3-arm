#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2009  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

. /lib/lsb/init-functions
. /lib/network/functions

# Parse the command line
while [ $# -gt 0 ]; do
	case "${1}" in
		--port=*)
			port=$(macify ${1#--port=})
			;;
		--zone=*)
			zone=${1#--zone=}
			;;
		-*)
			log_failure_msg "Unrecognized option: ${1}"
			exit ${EXIT_ERROR}
			;;
		*)
			action=${1}
			break
			;;
	esac
	shift
done

if [ -z "${port}" ] || [ -z "${action}" ]; then
	echo "Usage: $0 <port> <up|down|attach|detach|status> [hooks]"
	echo
	exit 1
fi

if ! device_exists ${port}; then
	log_failure_msg "Port ${port} does not exist."
	exit 1
fi

for arg in ${@-$(find ${CONFIG_PORTS}/${port}/)}; do
	[ -L "${arg}" ] && arg=$(readlink ${arg})
	arg=${arg##*/}
	[ -e "${CONFIG_PORTS}/${port}/${arg}" ] || continue
	hooks="${hooks} ${CONFIG_PORTS}/${port}/${arg}"
done

case "$action" in
	up)
		message="Setting up port ${port}..."
		ip link set $(devicify ${port}) up
		evaluate_retval
		;;

	down)
		;;

	attach)
		;;

	detach)
		;;

	status)
		;;

	*)
		log_failure_msg "\"${action}\" is not a valid command."
		exit 1
		;;
esac

for hook in ${hooks}; do
	[ -d "${hook}" ] && continue
	(
		. ${hook}
		if [ -n "${HOOK}" ] && hook_exists ${HOOK}; then
			hook_run ${HOOK} --config=${hook} --port=${port} --zone=${zone} ${action}
			RET=$?
		else
			echo -e "${FAILURE}Unable to process ${hook}. Either"
			echo -e "${FAILURE}the HOOK variable was not set,"
			echo -e "${FAILURE}or the specified hook cannot be executed."
			message=""
			log_failure_msg
		fi
		exit ${RET}
	) || failed=1
done

case "${action}" in
	down)
		# If no ports are running yet, push device down.
		if ! $0 ${port} status &>/dev/null; then
			message="Pushing down port ${port}..."
			ip link set $(devicify ${port}) down
			evaluate_retval
		fi
		;;
	status)
		exit ${failed}
		;;
esac
