###############################################################################
# IPFire.org    - An Open Source Firewall Solution                            #
# Copyright (C) - IPFire Development Team <info@ipfire.org>                   #
###############################################################################

name       = bash
version    = 4.2
release    = 7

groups     = System/Tools
url        = http://www.gnu.org/software/bash/
license    = GPLv2+
summary    = Bash is short for born again shell.

description
	Bash is the shell, or command language interpreter, that will appear in \
	the GNU operating system. Bash is an sh-compatible shell that incorporates \
	useful features from the Korn shell (ksh) and C shell (csh). It is intended \
	to conform to the IEEE POSIX P1003.2/ISO 9945.2 Shell and Tools standard.
end

source_dl  = http://ftp.gnu.org/gnu/bash/

build
	requires
		autoconf
		automake
		bison
		ncurses-devel
		readline-devel
	end

	prepare_cmds
		# Bash uses the RTLD_LAZY option when loading libraries. We want to use
		# RTLD_NOW (it is defined from <dlfcn.h>:
		sed -e "s/filename, RTLD_LAZY/filename, RTLD_NOW/" \
			-i builtins/enable.def

		sed -i "s|htmldir = @htmldir@|htmldir = /usr/share/doc/%{thisapp}|" \
			Makefile.in
	end

	configure_options += \
		--bindir=/bin \
		--without-bash-malloc \
		--with-installed-readline

	# Test hangs forever
	#def test
	#	make tests
	#end

	install_cmds
		mkdir -pv %{BUILDROOT}/{bin,etc/profile.d,root}

		# Bash startup files
		cp -vf %{DIR_SOURCE}/dot_bash_logout %{BUILDROOT}/root/.bash_logout
		cp -vf %{DIR_SOURCE}/dot_bash_profile %{BUILDROOT}/root/.bash_profile
		cp -vf %{DIR_SOURCE}/dot_bashrc %{BUILDROOT}/root/.bashrc

		# /etc/profile.d
		cp -vf %{DIR_SOURCE}/profile.d/* %{BUILDROOT}/etc/profile.d

		ln -svf bash %{BUILDROOT}/bin/sh
	end
end

packages
	package %{name}
		groups += Base Build

		prerequires = coreutils
		requires
			/etc/bashrc
			/etc/profile
		end

		script posttransin
			# Create /etc/shells, if it does not exist.
			[ -f "/etc/shells" ] || touch /etc/shells

			found_sh=0
			found_bash=0
			while read line; do
				if [ "/bin/bash" = "${line}" ]; then
					found_bash=1
				elif [ "/bin/sh" = "${line}" ]; then
					found_sh=1
				fi
			done < /etc/shells

			if [ "${found_bash}" = "0" ]; then
				echo "/bin/bash" >> /etc/shells
			fi

			if [ "${found_sh}" = "0" ]; then
				echo "/bin/sh" >> /etc/shells
			fi
		end

		script postun
			[ -e "/etc/shells" ] || exit 0

			# Remove /bin/bash and /bin/sh from /etc/shells.
			while read line; do
				if [ "/bin/bash" = "${line}" ]; then
					continue
				elif [ "/bin/sh" = "${line}" ]; then
					continue
				fi

				echo "${line}"
			done < /etc/shells > /etc/shells.$$

			mv -f /etc/shells{.$$,}
		end
	end

	package %{name}-debuginfo
		template DEBUGINFO
	end
end
