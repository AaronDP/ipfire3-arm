#!/bin/bash

LIBARY_PATHS="${BUILDROOT}/lib ${BUILDROOT}/usr/lib"
BINARY_PATHS="${LIBARY_PATHS} ${BUILDROOT}/bin ${BUILDROOT}/sbin"
BINARY_PATHS="${BINARY_PATHS} ${BUILDROOT}/usr/bin ${BUILDROOT}/usr/sbin"

has_canary() {
	local file=${1}

	readelf -s ${file} | grep -q "__stack_chk_fail"
}

has_execstack() {
	local file=${1}

	readelf -h ${file} | grep -qE "Type:[[:space:]]*EXEC"
}

has_interpreter() {
	local file=${1}

	[ -n "$(get_interpreter ${file})" ]
}

has_nx() {
	local file=${1}

	readelf -l ${file} | grep "GNU_STACK" | grep -q "RWE"
	[ $? != 0 ]
}

is_elf() {
	local file=${1}

	file ${file} | grep -q "ELF"
}

is_relro_partly() {
	local file=${1}

	readelf -l ${file} | grep -q "GNU_RELRO"
}

is_relro_full() {
	local file=${1}

	if is_relro_partly ${file}; then
		readelf -d ${file} | grep -q "BIND_NOW"
		return $?
	fi
	return 1
}

is_shared_object() {
	local file=${1}

	file ${file} | grep -q "shared object"
}

is_static() {
	local file=${1}

	file ${file} | grep -q "statically linked"
}

get_interpreter() {
	local file=${1}

	readelf -l ${file} | grep "program interpreter" | \
		tr -d "]" | awk '{ print $NF }'
}

get_needed() {
	local file=${1}

	readelf -d ${file} | grep NEEDED | \
		tr -d "[]" | awk '{ print $NF }'
}

get_rpath() {
	local file=${1}

	readelf -d ${file} | grep RPATH | \
		tr -d "[]" | awk '{ print $NF }'
}

get_soname() {
	local file=${1}

	readelf -d ${file} | grep SONAME | \
		tr -d "[]" | awk '{ print $NF }'
}

filter_startfiles() {
	local file=${1}

	grep -qE "crt[1in]\.o$" <<<${file}
}

find_requires() {
	local output
	local file
	local files=$(find_elf_files ${BINARY_PATHS})

	for file in ${files}; do
		output="${output} $(get_needed ${file})"
	done

	listsort ${output}
}

find_provides() {
	local output
	local file
	local files=$(find_elf_files ${LIBARY_PATHS})

	for file in ${files}; do
		output="${output} $(get_soname ${file})"
	done

	listsort ${output}
}

find_elf_files() {
	local dir
	local dirs=$@

	local file
	local files

	for dir in ${dirs}; do
		for file in $(find ${dir} -type f 2>/dev/null); do
			if is_elf ${file} && is_shared_object ${file} && ! is_static ${file}; then
				files="${files} ${file}"
			fi
		done
	done

	echo ${files}
}

listsort() {
	local item
	for item in $@; do
		echo "${item}"
	done | sort -u | tr "\n" " "
}

listmatch() {
	local arg=${1}
	shift

	local item
	for item in $@; do
		if [ "${arg}" = "${item}" ]; then
			return 0
		fi
	done
	return 1
}
