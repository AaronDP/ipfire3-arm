#!/bin/bash -x

BOOTLOADER_DIR=/usr/src/src/bootloader
IMAGES_DIR=/usr/src/images

# Size of the ext filesystem in gigabytes
FSSIZE=2
FSTYPE=ext4

ISO_FILENAME=${DISTRO_SNAME}-${DISTRO_VERSION}.${PKG_ARCH}.iso

. $(dirname ${0})/common-functions

function find_latest_kernel_release() {
	local i
	for i in /lib/modules/*; do
		i=$(basename ${i})
	done

	echo "${i}"
}

KERNEL_RELEASE=$(find_latest_kernel_release)

function installer_image() {
	local target=${1}
	local dir=${2}

	# Create target directory if not existant
	mkdir -p ${target} 2>/dev/null

	# Create installer images:
	#  (1) osmin.img (minimal cow image)
	#  (2) squashfs.img (installer)

	local i
	for i in dev proc sys lib/modules; do
		mkdir -p ${dir}/${i} 2>/dev/null
	done

	# Copy kernel modules
	cp -vfr /lib/modules/${KERNEL_RELEASE} ${dir}/lib/modules/

	# Copy overlay
	cp -vfr /usr/src/src/install/* ${dir}

	_installer_image_ext3fs \
		${target}/$(basename ${target})/ext3fs.img /installer
	_installer_image_osmin \
		${target}/osmin.img \
		${target}/$(basename ${target})/ext3fs.img

	cd ${target}
	mksquashfs * ${target}/squashfs.img -no-progress
	rm -fr $(basename ${target})
}

function _installer_image_osmin() {
	local file=${1}
	local image=${2}

	local tmp=$(mktemp -d)

	local image_loop=$(losetup -f)

	# Setting up loop for image
	losetup ${image_loop} ${image}

	# Setting up loop for an empty 64byte sparse file
	sparse=${tmp}/osmin
	sparse_loop=$(losetup -f)

	_ext3fs_sparse ${sparse} 128M
	losetup ${sparse_loop} ${sparse}

	# Create a DM snapshot device...
	local name="imgcreate-$$"
	local size=$(stat --format="%s" ${image})
	size=$(( ${size} / 512 ))

	dmsetup create ${name} \
		--table "0 ${size} snapshot ${image_loop} ${sparse_loop} p 8"

	# ...and resize it to its minimal size
	_ext3fs_resize /dev/mapper/${name}

	# Get size of the bytes used by the cow image
	local cow_size=( $(dmsetup status | grep "^${name}") )
	cow_size=${cow_size[4]}
	cow_size=$(awk -F"/" '{ print $1 }' <<<${cow_size})
	cow_size=$(( ${cow_size} * 512 ))

	sleep 2
	dmsetup remove ${name}

	# ... and truncate it to its minimal size
	truncate -s ${cow_size} ${sparse}

	losetup -d ${sparse_loop}
	losetup -d ${image_loop}

	rm -f ${file}
	( cd ${tmp} && \
		mksquashfs * ${file} -no-progress )
}

function _ext3fs_blocks() {
	local device=${1}

	dumpe2fs -h ${device} 2>/dev/null | \
		grep "Block count" | awk '{ print $NF }'
}

function _ext3fs_bytes() {
	echo $(( $(_ext3fs_blocks $@) * 512 ))
}

function _ext3fs_resize() {
	local device=${1}
	local size=${2}

	[ -z "${size}" ] && size="-M"

	e2fsck -f -y ${device}
	resize2fs ${device} ${size}
}

function _ext3fs_sparse() {
	local file=${1}
	local size=${2}

	# Create a sparse disk with given size
	dd if=/dev/zero of=${file} bs=1 count=0 seek=${size}
}

function _ext3fs_resparse() {
	local file=${1}
	local device=${2}

	local size=$(stat --format="%s" ${file})

	# Shrink FS to minimal size
	_ext3fs_resize ${device}
	truncate -s $(_ext3fs_bytes ${device}) ${file}

	_ext3fs_sparse ${file} ${size}
	_ext3fs_resize ${device} ${size}
}

function _installer_image_ext3fs() {
	local file=${1}
	local dir=${2}

	local zero=$(mktemp)

	mkdir -p $(dirname ${file}) 2>/dev/null

	# Create a zeroed file
	_ext3fs_sparse ${file} ${FSSIZE}G

	# Create a temporary directory
	# and get a free loop device
	local tmp_dir=$(mktemp -d)
	local loop=$(losetup -f)

	# Set up the loop device
	losetup ${loop} ${file}

	# Create filesystem
	mkfs.${FSTYPE} \
		-L "$(basename ${file})" \
		-m 1 \
		${loop}

	# Tune the FS
	tune2fs -c0 -i0 -Odir_index -ouser_xattr,acl ${loop}

	# Mount and copy all files to the FS
	mount ${loop} ${tmp_dir}
	cp -frp ${dir}/* ${tmp_dir}
	umount ${tmp_dir}

	#_ext3fs_resparse ${file} ${loop}

	losetup -d ${loop}

	rm -rf ${tmp_dir}
}

function install_config() {
	local src=${1}
	local dest=${2}

	sed \
		-e "s/@NAME@/${DISTRO_NAME}/g" \
		-e "s/@SNAME@/${DISTRO_SNAME}/g" \
		-e "s/@VERSION@/${DISTRO_VERSION}/g" \
		-e "s/@SLOGAN@/${DISTRO_SLOGAN}/g" \
		-e "s/@KERNEL@/${KERNEL_RELEASE}/g" \
	< ${src} > ${dest}
}

function install_isolinux() {
	local dest=${1}

	mkdir -p ${dest} 2>/dev/null

	local i
	for i in isolinux.bin vesamenu.c32; do
		cp -f /usr/share/syslinux/${i} ${dest}/
	done

	install_config ${BOOTLOADER_DIR}/installer.conf ${dest}/isolinux.cfg
	cp -f ${BOOTLOADER_DIR}/{*.msg,splash.*} ${dest}/

	install_kernel ${dest}
}

function install_kernel() {
	local dest=${1}

	mkdir -p ${dest} 2>/dev/null

	local file
	for file in vmlinuz; do
		cp -f /boot/${file}-${KERNEL_RELEASE}* ${dest}/${file}0
	done

	dracut -f ${dest}/initrd0 ${KERNEL_RELEASE}
}

case "${1}" in
	iso)
		log DEBUG "Creating ISO image..."

		ISO_DIR=$(mktemp -d)
		ISO_FILE=$(mktemp)

		# Copy installer image to ISO
		installer_image ${ISO_DIR}/LiveOS /installer

		# Install bootloader
		install_isolinux ${ISO_DIR}/isolinux

		# "Copy" packages
		mv /packages ${ISO_DIR}/Packages

		cd ${ISO_DIR} && \
			mkisofs -J -r -V "${DISTRO_NAME}_${DISTRO_VERSION}" \
				-b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot \
				-boot-load-size 4 -boot-info-table . > ${ISO_FILE}

		cat ${ISO_FILE} > ${IMAGES_DIR}/${ISO_FILENAME}
		;;

	*)
		log ERROR "Unknown type of image: ${1}"
		exit 1
		;;
esac
