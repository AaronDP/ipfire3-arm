#!/bin/bash

BASEDIR=/ipfire-3.x

. /ipfire-3.x/tools/naoki-include

# Read in global configuration


# CLI

function usage() {
	cat <<EOF
$0 - Usage:
	Blaaah

EOF
}

while [ $# -gt 0 ]; do
	case "${1}" in
		--debug|-d)
			DEBUG=1
			log INFO "Debugging is enabled."
			;;
		
		--force|-f)
			FORCE=1
			log INFO "Force is enabled."
			;;

		--help|-h)
			usage
			exit 0
			;;

		--toolchain)
			log INFO "Toolchain option is enabled."
			TOOLCHAIN=1
			;;

		*)
			if [ -z "${ACTION}" ]; then
				ACTION=${1}
			elif [ -z "${PKG_NAME}" ] && is_package ${1}; then
				PKG_NAME=$(find_package ${1})
			else
				error "Unrecognized option: ${1}."
				exit 2
			fi
	esac
	shift
done

#if [ -z "${PKG_NAME}" ]; then
#	usage
#	error "You must provide a valid package name."
#	exit 2
#fi

# Read in package metadata
log DEBUG "Pakckage: ${PKG_NAME}..."
log DEBUG "Action  : ${ACTION}..."
log DEBUG "CLI     : $@"

## Init environment
#BUILD_DIR=${BASEDIR}/build_$(package_id)

#if [ -d "${BUILD_DIR}" ]; then
#	if force; then
#		warning "An old build directory is still there. Cleaning up."
#		naoki_cleanup
#	else
#		error "An old build directory is still there."
#		error "   Run with --force or remove manually."
#		exit 1
#	fi
#fi

# Run
case "${ACTION}" in
	init)
		naoki_init ${PKG_NAME} $@
		;;

	destroy|cleanup)
		naoki_cleanup ${PKG_NAME} $@
		;;

	build)
		if [ "${TOOLCHAIN}" = "1" ]; then
			naoki_toolchain ${PKG_NAME}
			exit $?
		else
			naoki_build ${PKG_NAME}
			exit $?
		fi
		;;

	dependencies|deps)
		package_toolchain_dependencies ${PKG_NAME}
		package_toolchain_dependencies_recursive ${PKG_NAME}
		package_runtime_dependencies ${PKG_NAME}
		package_runtime_dependencies_recursive ${PKG_NAME}
		package_build_dependencies ${PKG_NAME}
		package_build_dependencies_recursive ${PKG_NAME}
		;;

	profile)
		package_profile ${PKG_NAME}
		;;
	
	raw|info)
		package_info ${PKG_NAME}
		;;

	shell)
		naoki_shell ${PKG_NAME}
		;;

	list)
		for package in $(package_list); do
			printf "%-30s %-15s %1s\n" \
				"${package}" \
				"$(package_version ${package})-$(package_release ${package})" \
				$(package_is_built ${package} && echo "Y" || echo "N")
		done
		;;
	
	tree)
		package_tree $(package_list)
		;;

	*)
		error "You must provide an action."
		exit 2
		;;

esac
