#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

check_common() {
	local NAME=$1
	if [ -n "$3" ]; then
		local RVER=$2
		local COMMAND=$3
	else
		local COMMAND=$2
	fi
	
	local EXTRA=$4
	
	RANDOM=$$
	TMPFILE=/tmp/ipfire-check-$RANDOM
	
	echo -ne "${BOLD}Checking for $NAME${NORMAL}"
	
	[ -n "$RVER" ] && echo -n " (Requires at least $RVER)"
	
	bash -c "$COMMAND" >$TMPFILE 2>&1
	
	if ! grep -q "command not found" < $TMPFILE; then
		beautify message DONE
	else
		rm -f $TMPFILE 2>/dev/null
		exiterror "$NAME not found!"
	fi
	
	[ -n "$EXTRA" ] && echo -n "$EXTRA"
	
	cat $TMPFILE
	rm -f $TMPFILE 2>/dev/null
	echo # Empty line
}

check_toolchain() {	
	check_common "GNU Bash"		"2.05a"		"bash --version | head -n1 | cut -d\" \" -f2-4"
	check_common "/bin/sh links bash?"		"if ! which sh; then echo \"command not found\"; fi"
	check_common "GNU Binutils"	"2.12"		"ld --version | head -n1 | cut -d\" \" -f3-" "Binutils: "
	check_common "GNU Bison"	"1.875"		"bison --version | head -n1"
	check_common "/usr/bin/yacc links bison?"	"if ! which yacc; then echo \"command not found\"; fi"
	check_common "Bzip2"		"1.0.2"		"bzip2 --version 2>&1 < /dev/null | head -n1 | cut -d\" \" -f1,6-"
	check_common "Coreutils"	"5.0"		"chown --version | head -n1 | cut -d\")\" -f2" "Coreutils:"
	check_common "Diffutils"	"2.8"		"diff --version | head -n1"
	check_common "Findutils"	"4.1.20"	"find --version | head -n1"
	check_common "GNU awk"		"3.0"		"gawk --version | head -n1"
	check_common "/bin/awk links gawk?"		"if ! which awk; then echo \"command not found\"; fi"
	check_common "GNU CC"		"3.0.1"		"gcc --version | head -n1"
	check_common "GNU libc"		"2.2.5"		"/lib/libc.so.6 | head -n1 | cut -d\" \" -f1-7"
	check_common "GNU Grep"		"2.5"		"grep --version | head -n1"
	check_common "GNU zip"		"1.2.4"		"gzip --version | head -n1"
	check_common "Linux 2.6"	"2.6.x"		"uname -r" "Linux: "
	check_common "GNU make"		"3.79.1"	"make --version | head -n1"
	check_common "Patch"		"2.5.4"		"patch --version | head -n1"
	check_common "GNU sed"		"3.0.2"		"sed --version | head -n1"
	check_common "GNU tar"		"1.14"		"tar --version | head -n1"
	check_common "GNU Texinfo"	"4.8"		"makeinfo --version | head -n1"
	check_common "GNU m4"		"1.4.8"		"m4 --version | head -n1"
}

check_build() {
	check_common "GNU make"		"3.79.1"	"make --version | head -n1"
	check_common "GNU wget"				"wget --version | head -n1"
	check_common "Git"				"git --version"
	check_common "ncftp Client"			"echo \"quit\" | ncftp --version | head -n1"
	check_common "GNU which"			"which --version | head -n1"
}

check_rootfiles() {
	ACTION=$1

	echo -n " Running rootfile checks"

	case "$ACTION" in
		--fix)
			echo -n " and fix"

			# Remove leading pluses and replace them by '#'
			sed -e "s/^+/#/g" -i $BASEDIR/src/rootfiles/*/*

			# Fix UCLIBC_DIR and UCLIBC_TARGET
			sed -e "s@${UCLIBC_DIR:1}@UCLIBC_DIR@g" \
			    -e "s@${UCLIBC_TARGET}@UCLIBC_TARGET@g" \
				-i $BASEDIR/src/rootfiles/installer/*

			# Fix INSTALLER_DIR
			sed -e "s@${INSTALLER_DIR:1}/@INSTALLER_DIR/@g" \
				-i $BASEDIR/src/rootfiles/installer/*
			;;
		"")
			: # If no option was given we do nothing.
			;;
		*)
			exiterror "This is not a valid option: $ACTION"
			;;
	esac

	echo "..." # End the line

	echo -n "  Searching for leading slashes..."
	if grep -n ^/ $BASEDIR/src/rootfiles/*/*; then
		exiterror "Please check your rootfiles! There are leading slashes."
	else
		beautify message DONE
	fi

	echo -n "  Searching for leading pluses..."
	if grep -n ^+ $BASEDIR/src/rootfiles/*/*; then
		exiterror "Please check your rootfiles for leading pluses."
	else
		beautify message DONE
	fi

	echo -n "  Searching for emtpy lines..."
	if grep -n ^$ $BASEDIR/src/rootfiles/*/*; then
		exiterror "Please check your rootfiles for empty lines."
	else
		beautify message DONE
	fi

}

check_sanity() {

	echo "Checking sanity of working directory..."

	check_rootfiles $*

}
