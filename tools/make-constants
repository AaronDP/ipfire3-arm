#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2008  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################
###############################################################################
#
# Define default vars
#
###############################################################################

# Default target
TARGET=${TARGET-i686}
POSSIBLE_TARGETS="i686 i586 i486 via-c7 via-c3 geodelx atom330 core2duo"

# Configuration rootdir
CONFIG_ROOT=/etc/$SNAME

# Nice level
NICE=10

# Read in kernel version
KVER=$(grep --max-count=1 PKG_VER lfs/linux | awk '{ print $3 }' | tr -d '\n'; grep --max-count=1 LOCALVERSION lfs/linux | awk '{ print $3 }' | tail -1)

# Read in machine type
MACHINE_REAL=$(uname -m)

# Read in our tag
GIT_TAG=$(git tag 2>/dev/null | tail -1)

# Embedded build
EMB=0

# Default building options
BUILD_EXTRAS=1
BUILD_DEBUG=0

# Default parallelism options
PARALLELISMFLAGS=-j$(( $(grep processor < /proc/cpuinfo | wc -l) * 2 + 1 ))

# Default distcc options
DISTCC_PORT=3632
DISTCC_JOBS=4

# Default hostname
HOSTNAME=$(hostname -f || hostname)

###############################################################################
#
# Read the local configuration to override the environment variables
#
###############################################################################

if ! [ -e .config ]; then
	sed -e "s/@UUID@/$(uuidgen 2>/dev/null || cat /proc/sys/kernel/random/uuid)/" \
	    -e "s/^#UUID=/UUID=/" < $BASEDIR/.config-default > $BASEDIR/.config
fi

. $BASEDIR/.config

###############################################################################
#
# Variables that are not modifyable by .config
#
###############################################################################

if [ 'i686' = $MACHINE_REAL \
	-o 'i586' = $MACHINE_REAL \
	-o 'i486' = $MACHINE_REAL \
	-o 'x86_64' = $MACHINE_REAL ]; then
	IFS_HOST="$(echo $MACHTYPE | sed "s/$(echo $MACHTYPE | cut -d- -f2)/cross/")"
else
	beautify message FAIL
	echo "Can't determine your architecture - $MACHINE_REAL"
	exit 1
fi

LINKER=/lib/ld-linux.so.2
if [ 'i686' = $TARGET -o 'i586' = $TARGET \
	-o 'i486' = $TARGET ]; then
	MACHINE=${TARGET}
	IFS_TARGET="${MACHINE}-pc-linux-gnu"
	CFLAGS="-O2 -march=${MACHINE} -pipe -fomit-frame-pointer"
	CXXFLAGS="${CFLAGS}"
elif [ 'atom330' = $TARGET ]; then
	MACHINE=i686
	IFS_TARGET="${MACHINE}-atom-linux-gnu"
	CFLAGS="-O2 -march=${MACHINE} -mmmx -msse -msse2 -msse3 -mssse3 -pipe -fomit-frame-pointer"
	CXXFLAGS="${CFLAGS}"
elif [ 'core2duo' = $TARGET ]; then
	MACHINE=i686
	IFS_TARGET="${MACHINE}-c2d-linux-gnu"
	CFLAGS="-O2 -march=pentium-m -msse2 -pipe"
	CXXFLAGS="${CFLAGS}"
elif [ 'via-c7' = $TARGET ]; then
	MACHINE=i686
	IFS_TARGET="${MACHINE}-via-linux-gnu"
	CFLAGS="-O2 -march=${MACHINE} -mmmx -msse -msse2 -msse3 -pipe"
	CXXFLAGS="${CFLAGS}"
elif [ 'via-c3' = $TARGET ]; then
	MACHINE=i586
	IFS_TARGET="${MACHINE}-via-linux-gnu"
	CFLAGS="-O2 -march=c3 -m3dnow -pipe -fomit-frame-pointer"
	CXXFLAGS="${CFLAGS}"
elif [ 'geodelx' = $TARGET ]; then
	MACHINE=i586
	IFS_TARGET="${MACHINE}-geode-linux-gnu"
	CFLAGS="-Os -march=geode -pipe -fomit-frame-pointer"
	CXXFLAGS="${CFLAGS}"
else
	beautify message FAIL
	echo "Not a valid target arch (i686|i586|i486|via-c7|via-c3|geodelx) - $TARGET"
	exit 1
fi

# Make debugging symbols
if [ "$BUILD_DEBUG" == "1" ]; then
	CFLAGS=$(sed -e "s/-O[123s]/-O/g" <<< $CFLAGS)
	CFLAGS="$CFLAGS -g"
	CXXFLAGS=$(sed -e "s/-O[123s]/-O/g" <<< $CXXFLAGS)
	CXXFLAGS="$CXXFLAGS -g"
fi

# Define IMAGENAME
IMAGENAME=${SNAME}-${VERSION}.${TARGET}

if [ "$BUILD_DEBUG" == "1" ]; then
	# On debug build, append -debug
	IMAGENAME=${IMAGENAME}-debug
fi

# Define TOOLCHAINNAME
TOOLCHAINNAME=$SNAME-$TOOLCHAINVERSION-toolchain-${TARGET}

# Set up what used to be /tools
TOOLS_DIR=/tools_${TARGET}

# Set up /installer
INSTALLER_DIR=/pomona

# A place to build the iso
CDROM_DIR=/cdrom

# A place to keep the images
IMAGES_DIR=/images

# Files that indicates that we are running or failed
RUNNING=$BASEDIR/.running
FAILED=$BASEDIR/.failed
