#!/bin/bash
###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2008  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

# Save packages, that were already compiled in this variable:
PACKAGES_DONE=

pkg_list_groups() {
	grep ^GROUP $BASEDIR/lfs/* | awk '{ print $3 }' | sort | uniq
}

pkg_list_groups_wiki() {
	local group
	local package
	for group in $(pkg_list_groups); do
		echo "===== $group ====="
		for package in $BASEDIR/lfs/*; do
			(	eval $(pkg_info ${package})
				if [ -n "$PKG_NAME" ] && [ "$PKG_REL" != "-1" ] && [ "$PKG_GROUP" = "$group" ]; then
					[ -n "$PKG_VERSION" ] && NAME="${PKG_NAME}-${PKG_VERSION}"
					echo "  * [[.:package:$(basename $package)|${PKG_NAME}]] - ${PKG_SHORT}"
				fi
			)
		done
	done
}

pkg_list_packages() {
	echo "#### List of softwares used to build $NAME Version: $VERSION ####"
	local package
	for i in $BASEDIR/lfs/*; do
		[ -L "$i" ] && continue
		package=$(basename $i)
		(	eval $(pkg_info ${package})
			if [ -n "$PKG_NAME" ] && [ "$PKG_REL" != "-1" ]; then
				printf "  * %-30s" ${PKG_NAME}-${PKG_VER}
				echo "${PKG_SHORT}"
			fi
		)
	done
}

pkg_list_packages_wiki() {
	echo "====== List of softwares used to build $NAME Version: $VERSION ======"
	local package
	for i in $BASEDIR/lfs/*; do
		[ -L "$i" ] && continue
		package=$(basename $i)
		(	eval $(pkg_info ${package})
			if [ -n "$PKG_NAME" ] && [ "$PKG_REL" != "-1" ]; then
				[ -n "$PKG_VER" ] && PKG_NAME="${PKG_NAME}-${PKG_VERSION}"
				echo "  * [[.:package:$package|${PKG_NAME}]] - ${PKG_SHORT}"
			fi
		)
	done
}

pkg_info() {
	cd $BASEDIR/lfs && $EXTRA_MAKE make -f $1 \
		CONFIG_ROOT=$CONFIG_ROOT \
		LINKER=$LINKER \
		TOOLS_DIR=$TOOLS_DIR \
		MACHINE="$MACHINE" \
		MACHINE_REAL="$MACHINE_REAL" \
		IFS_HOST="$IFS_HOST" \
		IFS_TARGET="$IFS_TARGET" \
		TARGET="$TARGET" \
		LFS_BASEDIR=$BASEDIR \
		LFS=$LFS \
		INSTALLER_DIR=$INSTALLER_DIR \
		PARALLELISMFLAGS=$PARALLELISMFLAGS \
		KVER=$KVER \
		STAGE=$STAGE \
		STAGE_ORDER=$STAGE_ORDER \
		SNAME=$SNAME \
		info 2>/dev/null
}

pkg_info_wiki() {
	(	eval $(pkg_info ${1})

		[ "$PKG_NAME" = "" ] && exit

		# Output everything in wiki format
		echo "^  $PKG_NAME  ^^"
		echo "| **Version:**  | $PKG_VER  |"
		echo "| **Release:**  | $PKG_REL  |"
		echo "| **Group:**  | $PKG_GROUP  |"
		echo "| **License:**  | $PKG_LICENSE  |"
		echo "| **Maintainer:**  | $PKG_MAINTAINER  |"

		# Dependencies
		echo -n "| **Dependencies:** | "
		for dep in $PKG_DEPS; do
			echo -n "[[$dep]] "
		done; echo "|"

		echo "| $(echo $PKG_DESC) ||"
		echo "| **Website:**  | $PKG_URL  |"
		if [ "$PKG_DEBUG" = "yes" ]; then
			echo "<color red>This is a debug-package.</color>"
		fi
		if [ "$PKG_EXTRA" = "yes" ]; then
			echo "<color green>This is an extra package.</color>"
		fi
		echo
		for file in $(find $BASEDIR/src/rootfiles -name "$1"); do
			echo "**.${file#$BASEDIR}**"
			for i in $(cat ${file}); do
				echo "  $i"
			done
		done
	)
}

pkg_deps() {
	(
		eval $(pkg_info ${1})
		echo $PKG_DEPS
	)
}

pkg_files() {
	(
		eval $(pkg_info ${1})
		for i in $PKG_FILES; do
			echo $i
		done
	)
}

function pkg_info_shell() {
	format_desc() {
		MAX_LENGTH=38
		INPUT=$@

		LINE=""
		LENGTH=0
		for word in $INPUT; do
			LENGTH=$(expr $LENGTH + ${#word})
			if [ "$LENGTH" -ge "$MAX_LENGTH" ]; then
				printf "$LINE\n"
				LINE="              ${word} "
				LENGTH=${#word}
			else
				LINE="$LINE${word} "
			fi
			#echo "-- ($word) $LINE"
		done
		printf "$LINE\n"
	}
	for pkg in $@; do
		(
			eval "$(pkg_info ${pkg})"
			echo    "############################################################"
			echo -e "# ${CLR_BOLD_RED}PACKAGE INFO${NORMAL}"
			echo    "############################################################"
			for val in PKG_NAME PKG_VER PKG_REL break PKG_GROUP PKG_MAINTAINER break PKG_URL PKG_LICENSE; do
				if [ "${val}" == "break" ]; then
					echo "         ----------------------------------------         "
				else
					printf "${CLR_BOLD_RED}%-12s${NORMAL}: ${!val}\n" ${val#PKG_}
				fi
			done
			for val in PKG_SHORT PKG_DESC; do
				printf "${CLR_BOLD_RED}%-12s${NORMAL}: " ${val#PKG_}
				format_desc ${!val}
			done
			)
	done
}
