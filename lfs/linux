###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007, 2008, 2009 Michael Tremer & Christian Schmidt           #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

PKG_NAME   = linux
PKG_VER    = 2.6.29.1
PKG_REL    = 0

THISAPP    = $(PKG_NAME)-$(PKG_VER)
DL_FILE    = $(THISAPP).tar.bz2
DIR_APP    = $(DIR_SRC)/$(THISAPP)

OBJECT     = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)

MAINTAINER =
GROUP      = System/Base
ifeq "$(LFS_FILE)" "linux-headers"
	CORE = no
else
	CORE = yes
endif
EXTRA      = no
DEBUG      = no
BUILD_DEPS =
DEPS       =

URL        = http://www.kernel.org/
LICENSE    = GPLv2
SHORT_DESC = The Linux kernel.

define LONG_DESC
	The kernel package contains the Linux kernel (vmlinuz), the core of any \
	Linux operating system. The kernel handles the basic functions \
	of the operating system: memory allocation, process allocation, device \
	input and output, etc.
endef

CFLAGS     =
CXXFLAGS   =

LOCALVERSION = -ipfire1
FULLVER= $(PKG_VER)$(LOCALVERSION)

# Patches
AUFS_PATCH     = aufs2-$(PKG_VER)-1.patch
GRSEC_PATCH    = grsecurity-2.1.14-$(PKG_VER)-200903281534.patch
#OCF_PATCH      = ocf-linux-26-20080917.patch
REISER4_PATCH  = reiser4-for-$(PKG_VER).patch
ROUTES_PATCH   = routes-2.6.29-16.diff # Taken from http://www.ssi.bg/~ja/#routes
SQUASHFS_PATCH = $(THISAPP)-squashfs3.4-1.patch

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE) \
	$(AUFS_PATCH) \
	$(OCF_PATCH) \
	$(REISER4_PATCH) \
	$(GRSEC_PATCH) \
	$(THISAPP)-disable-compat_vdso-1.patch \
	$(ROUTES_PATCH)

download: $(objects)

info:
	$(DO_PKG_INFO)

install: $(OBJECT)

packages: $(PACKAGES)

$(PACKAGES): $(OBJECT)
	@$(DO_PACKAGE)

$(objects):
	@$(LOAD)

###############################################################################
# Installation Details
###############################################################################

$(OBJECT): $(objects)
	@$(PREBUILD)
	@rm -rf $(DIR_APP) && cd $(DIR_SRC) && $(EXTRACTOR) $(DIR_DL)/$(DL_FILE)

	cd $(DIR_APP) && echo "$(LOCALVERSION)" > localversion-ipfire

	### Aufs2
	#
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(AUFS_PATCH)

	### OCF
	#
	#cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(OCF_PATCH)
	#cd $(DIR_APP) && echo "source \"crypto/ocf/Kconfig\"" >> crypto/Kconfig

	### Reiser4
	#
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(REISER4_PATCH)

	### Routes
	#
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(ROUTES_PATCH)

	### GrSecurity
	#
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(GRSEC_PATCH)
	rm -f $(DIR_APP)/localversion-grsec

	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-disable-compat_vdso-1.patch
	
	cd $(DIR_APP) && sed -e "s/^HOSTCFLAGS.*=.*/& -fPIC/g" -i Makefile

ifeq "$(STAGE)" "toolchain"
	install -dv $(TOOLS_DIR)/include
	cd $(DIR_APP) && make mrproper
	cd $(DIR_APP) && make ARCH=x86 headers_check
	cd $(DIR_APP) && make ARCH=x86 INSTALL_HDR_PATH=dest headers_install
	cd $(DIR_APP) && cp -rv dest/include/* $(TOOLS_DIR)/include
endif

ifeq "$(STAGE)" "base"
	cd $(DIR_APP) && make mrproper
	cd $(DIR_APP) && make ARCH=x86 headers_check
	cd $(DIR_APP) && make ARCH=x86 INSTALL_HDR_PATH=dest headers_install
	cd $(DIR_APP) && cp -rv dest/include/* /usr/include
endif

ifeq "$(STAGE)" "ipfire"
	cd $(DIR_APP) && make mrproper

	# Select right optimization for the linux kernel.
	if [ "$(TARGET)" == "i486" ]; then \
		sed -e "s/^CONFIG_M686=y/# CONFIG_686 is not set/" \
			-e "s/^# CONFIG_M486 is not set/CONFIG_M486=y/" \
			< $(DIR_CONF)/kernel/kernel.config > $(DIR_APP)/.config; \
	elif [ "$(TARGET)" == "i586" ]; then \
		sed -e "s/^CONFIG_M686=y/# CONFIG_686 is not set/" \
			-e "s/^# CONFIG_M586TSC is not set/CONFIG_M586TSC=y/" \
			< $(DIR_CONF)/kernel/kernel.config > $(DIR_APP)/.config; \
	elif [ "$(TARGET)" == "via-c7" ]; then \
		sed -e "s/^CONFIG_M686=y/# CONFIG_686 is not set/" \
			-e "s/^# CONFIG_MVIAC7 is not set/CONFIG_MVIAC7=y/" \
			< $(DIR_CONF)/kernel/kernel.config > $(DIR_APP)/.config; \
	elif [ "$(TARGET)" == "via-c3" ]; then \
		sed -e "s/^CONFIG_M686=y/# CONFIG_686 is not set/" \
			-e "s/^# CONFIG_MVIAC3_2 is not set/CONFIG_MVIAC3_2=y/" \
			< $(DIR_CONF)/kernel/kernel.config > $(DIR_APP)/.config; \
	else \
		cp -f $(DIR_CONF)/kernel/kernel.config $(DIR_APP)/.config; \
	fi

	cd $(DIR_APP) && yes "" | make oldconfig

	cd $(DIR_APP) && cp -vf $(DIR_CONFIG)/kernel/$(SNAME)_logo.ppm \
		drivers/video/logo/logo_linux_clut224.ppm
	
	cd $(DIR_APP) && make CC="gcc -nopie" $(PARALLELISMFLAGS)
	cd $(DIR_APP) && make modules_install
	
	cd $(DIR_APP) && cp -v arch/x86/boot/bzImage /boot/$(SNAME)kernel-$(FULLVER)
	cd $(DIR_APP) && cp -v System.map /boot/System.map-$(FULLVER)
	
	ln -svf $(SNAME)kernel-$(FULLVER) /boot/$(SNAME)kernel
	ln -svf System.map-$(FULLVER) /boot/System.map

	# keep the source code in $(DIR_SRC)/$(PKG_NAME)-$(FULLVER)
	cp -fal $(DIR_APP) $(DIR_SRC)/$(PKG_NAME)-$(FULLVER)

	rm -vf /lib/modules/$(KVER)/{build,source}
	ln -svf $(DIR_SRC)/$(PKG_NAME)-$(FULLVER) /lib/modules/$(KVER)/build
	ln -svf $(DIR_SRC)/$(PKG_NAME)-$(FULLVER) /lib/modules/$(KVER)/source
	-mkdir -pv /lib/modules/$(KVER)/extra
endif

	@rm -rf $(DIR_APP)
	@$(POSTBUILD)
