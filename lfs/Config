###############################################################################
#                                   LFSMake                                   #
#                    by Rod Roark <rod@sunsetsystems.com>                     #
#                                                                             #
#                        Copyright (C) 2002 Rod Roark                         #
#                                                                             #
# See http://www.lfsmake.org/ for the most current standard version.          #
#                                                                             #
# These Makefiles are made available under the terms of the Artistic License, #
# found at http://www.opensource.org/licenses/artistic-license.html.          #
###############################################################################

###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007, 2008, 2009 Michael Tremer & Christian Schmidt           #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

# URLs that are common sources of downloads.  If you're having trouble with
# a site you should change its URL to that of a suitable mirror site.
#
URL_IPFIRE  = http://source.ipfire.org/download
URL_TOOLCHAIN = source.ipfire.org:/pub/source/toolchains
URL_SOURCE = source.ipfire.org:/pub/source/source-3.x
URL_TARGET = source.ipfire.org:/srv/anonftp/pub/nightly-builds

# For most packages tarballs are unpacked here and then deleted after
# installation.
#
DIR_SRC = $(LFS)/usr/src

# Files are downloaded into DIR_TMP and then moved to DIR_DL, to avoid
# messes with partially retrieved files.  DIR_DL is where we will
# save all the files that are downloaded.  DIR_INFO contains the
# file lists of installed packages.
#
DIR_DL      = $(LFS_BASEDIR)/cache/tarballs
DIR_CONF    = $(LFS_BASEDIR)/config
DIR_INFO    = $(LFS_BASEDIR)/log_$(TARGET)
DIR_LFS     = $(LFS_BASEDIR)/lfs
DIR_TOOLS   = $(LFS_BASEDIR)/tools
DIR_TMP     = /tmp
DIR_PATCHES = $(DIR_DL)/../patches
DIR_CONFIG  = $(DIR_CONF)
DIR_SOURCE  = $(DIR_SRC)/src
DIR_PKG     = $(LFS_BASEDIR)/lfs
DIR_TARGET  = $(LFS_BASEDIR)/target
DIR_PACKAGES= /packages

VPATH = $(DIR_DL):$(DIR_PATCHES)

INITSCRIPT = $(PKG_NAME)

CONFIGURE_ARCH = \
	--build=$(IFS_TARGET) \
	--host=$(IFS_TARGET)

DEFAULT_PACKAGE = $(DIR_PACKAGES)/$(LFS_FILE)-$(PKG_VER)-$(SNAME)$(PKG_REL).$(TARGET).ipk
DEVEL_PACKAGE = $(DIR_PACKAGES)/$(LFS_FILE)-devel-$(PKG_VER)-$(SNAME)$(PKG_REL).$(TARGET).ipk
#ifeq "$(shell grep ^D $(DO_FIND_ROOTFILE))" ""
#	PACKAGES = $(DEFAULT_PACKAGE)
#else
#	PACKAGES = $(DEFAULT_PACKAGE) $(DEVEL_PACKAGE)
#endif
PACKAGES = $(DEFAULT_PACKAGE)

IMAGE_FILE  = $(IMAGES_DIR)/$(SNAME)-$(VERSION).sfs

LFS_FILE    = $(firstword $(MAKEFILE_LIST))

###############################################################################
# Common Macro Definitions
###############################################################################

DO_LOAD     = DIR_TMP=$(DIR_TMP) DIR_DL=$(DIR_DL) DIR_PATCHES=$(DIR_PATCHES) \
	python $(DIR_TOOLS)/downloader $(URL_IPFIRE)/$@
LOAD        = $(DO_LOAD) # To be compatible to the current build system.

EXTRACTOR   = bash $(DIR_SOURCE)/scripts/extractor

INSTALL_CONFIG = sed \
	-e "s/@NAME@/$(NAME)/g" \
	-e "s/@SNAME@/$(SNAME)/g" \
	-e "s/@VERSION@/$(VERSION)/g" \
	-e "s/@SLOGAN@/$(SLOGAN)/g" \
	-e "s/@DATE@/$(shell date '+%Y%m%d')/g" \
	-e "s/@IMAGENAME@/$(IMAGENAME)/g"

INSTALL_INITSCRIPT = echo "Installing initscript \"$(INITSCRIPT)\" -> /etc/init"; \
	install -m 644 $(DIR_SOURCE)/initscripts/extras/$(INITSCRIPT).conf /etc/init/

PYTHON_COMPILE = find /usr/lib/python*/ -name *.py | xargs /usr/bin/py-compile
PYTHON_EXTRACT_EGG = $(DIR_SOURCE)/scripts/py-extract-egg

DO_FIND_ROOTFILE = $$(find $(DIR_SOURCE)/rootfiles/{core,extras,debug}/{$(TARGET),} -type f \
	-maxdepth 1 -name "$(LFS_FILE)" 2>/dev/null | head -n1)

define DO_PKG_INFO
	@## ALPHABETICAL ORDER ##
	@echo "local PKG_BUILD_DEPS=\"$(BUILD_DEPS)\""
	@echo "local PKG_CORE=\"$(CORE)\""
	@echo "local PKG_DEBUG=\"$(DEBUG)\""
	@echo "local PKG_DEPS=\"$(DEPS)\""
	@echo "local PKG_DESC=\"$(value LONG_DESC)\""
	@echo "local PKG_EXTRA=\"$(EXTRA)\""
	@echo "local PKG_FILES=\"$(objects)\""
	@echo "local PKG_GROUP=\"$(GROUP)\""
	@echo "local PKG_LICENSE=\"$(LICENSE)\""
	@echo "local PKG_MAINTAINER=\"$(MAINTAINER)\""
	@echo "local PKG_NAME=\"$$(basename $(LFS_FILE))\""
	@echo "local PKG_PACKAGES=\"$(PACKAGES)\""
	@echo "local PKG_VER=\"$(PKG_VER)\""
	@echo "local PKG_REL=\"$(PKG_REL)\""
	@echo "local PKG_SHORT=\"$(value SHORT_DESC)\""
	@echo "local PKG_URL=\"$(URL)\""
endef

define DO_PACKAGE
	if [ "$(CORE)" = "yes" -o "$(EXTRA)" = "yes" ]; then \
		if [ -z "$(DO_FIND_ROOTFILE)" ]; then \
			touch $@_no_rootfile; \
			exit 0; \
		fi; \
		NAME=$(NAME) \
		SNAME=$(SNAME) \
		VERSION=$(VERSION) \
		KVER=$(KVER) \
		TARGET=$(TARGET) \
		MACHINE=$(MACHINE) \
		IFS_TARGET=$(IFS_TARGET) \
		\
		PKG_BUILD_DEPS="$(BUILD_DEPS)" \
		PKG_CORE="$(CORE)" \
		PKG_DEBUG="$(DEBUG)" \
		PKG_DEPS="$(DEPS)" \
		PKG_EXTRA="$(EXTRA)" \
		PKG_GROUP="$(GROUP)" \
		PKG_LICENSE="$(LICENSE)" \
		PKG_MAINTAINER="$(MAINTAINER)" \
		PKG_NAME="$(LFS_FILE)" \
		PKG_VER="$(PKG_VER)" \
		PKG_REL="$(PKG_REL)" \
		PKG_SHORT="$(value SHORT_DESC)" \
		PKG_URL="$(URL)" \
		\
		CONTROL_PREIN="$(value CONTROL_PREIN)" \
		CONTROL_PREUN="$(value CONTROL_POSTUN)" \
		CONTROL_POSTIN="$(value CONTROL_POSTIN)" \
		CONTROL_POSTUN="$(value CONTROL_POSTUN)" \
		\
		QUALITY_AGENT_WHITELIST_EXECSTACK="$(value QUALITY_AGENT_WHITELIST_EXECSTACK)" \
		QUALITY_AGENT_WHITELIST_RPATH="$(value QUALITY_AGENT_WHITELIST_RPATH)" \
		QUALITY_AGENT_WHITELIST_SONAME="$(value QUALITY_AGENT_WHITELIST_SONAME)" \
		\
			$(DIR_SOURCE)/pakfire/compressor --rootfile=$(DO_FIND_ROOTFILE) $@; \
	fi
endef

# For each package we create a list of files that it installed under 
# log/<OBJECT> name. Modified files are not identified
#
define FIND_FILES
	cd $(LFS)/ && $(TOOLS_DIR)/bin/find -mount \
	-not -path '.$(TOOLS_DIR)*' -not -path './tmp*' -not -path './usr/src*' \
	-not -path './dev*' -not -path './proc*' -not -path './sys*' \
	-not -path '.$(INSTALLER_DIR)*' -not -path './packages*'
endef

# This is common starting logic for builds.
#
ifneq "$(STAGE)" "toolchain"
define PREBUILD
	echo "### STARTING INSTALL #################################################"
	echo "# Application: $(THISAPP)"
	echo "# Description: $(SHORT_DESC)"
	echo "######################################################################"
	echo "# Saving file list..."
	# Remove package if exists
	for package in $(PACKAGES); do \
		rm -f $(DIR_PACKAGES)/$$package 2>/dev/null; \
	done
	if [ ! -f $(DIR_SRC)/lsalr ]; then $(FIND_FILES) > $(DIR_SRC)/lsalr; fi
endef
else
define PREBUILD
	echo "### STARTING INSTALL #################################################"
	echo "# Application: $(THISAPP)"
	echo "# Description: $(SHORT_DESC)"
	echo "######################################################################"
endef
endif

# Common end-of-installation logic for Stage 2 and beyond.
#
ifneq "$(STAGE)" "toolchain"
define POSTBUILD
	echo "### INSTALL DONE #####################################################"
	echo "# Application: $(THISAPP)"
	echo "# Saving file list to $(OBJECT)..."
	@$(FIND_FILES) > $(DIR_SRC)/lsalrnew
	@diff $(DIR_SRC)/lsalr $(DIR_SRC)/lsalrnew | grep '^> ' | sed 's+^> \./++' | sort > $(OBJECT)_diff
	@mv -f $(DIR_SRC)/lsalrnew $(DIR_SRC)/lsalr
	# compare roofile (same name as lfs script) with the list of installed files
	# special cases
	# - if the corresponding rootfile is not found, touch $(OBJECT)_missing_rootfile
	# - on a partial rebuild without a new file inside TARGET_diff, just touch TARGET
	# $(OBJECT)_diff : result of the diff
	# ROOTFILE : reference of include/exclude files
	# $(OBJECT)_rootfile : ROOTFILE with KVER replacement
	# $(OBJECT) : log result with {commented|include|added} files
	if [ -s "$(OBJECT)_diff" ]; then \
		LFS_SCRIPT="$(firstword $(MAKEFILE_LIST))"; \
		if [ "x$(PASS)" != "x" ]; then LFS_SCRIPT="$$LFS_SCRIPT.p$(PASS)"; fi; \
		ROOTFILE=$$(find $(DIR_SOURCE)/rootfiles/{core,extras,debug}/{$(TARGET),} -maxdepth 1 -type f -name $$LFS_SCRIPT 2>/dev/null | head -1); \
		if [ "$$ROOTFILE" = "" ]; then \
			touch $(OBJECT)_missing_rootfile; \
			ROOTFILE=$(OBJECT)_missing_rootfile ; \
			echo "error $$LFS_SCRIPT not found in $(DIR_SOURCE)/rootfiles"; \
		fi; \
		sed	-e "s@KVER@$(KVER)@g" \
			-e "s@IFS_TARGET@$(IFS_TARGET)@g" \
			-e "s@^/@@g" -e "s@^#/@#@g" \
			$$ROOTFILE > $(OBJECT)_rootfile; \
		echo 'open (F,"$(OBJECT)_rootfile"); \
		    while (<F>) { $$allfile{$$_} = "x" };close (F); \
		    while (<>) { \
			if ( defined ($$allfile{"#$$_"}) ) {print "#$$_"} \
			elsif ( defined ($$allfile{$$_}) ) {print $$_} \
			else {print "+$$_"} \
		    }; \
		' > /tmp/perl.pl; \
		perl /tmp/perl.pl < $(OBJECT)_diff \
		| sed -e "s@$(KVER)@KVER@g" -e "s@$(IFS_TARGET)@IFS_TARGET@g" > $(OBJECT); \
		rm -f $(OBJECT)_rootfile; \
	else \
		touch $(OBJECT); \
	fi
	@rm -f $(OBJECT)_diff
	echo "######################################################################"
endef
else
define POSTBUILD
	echo "### INSTALL DONE #####################################################"
	echo "# Application: $(THISAPP)"
	echo "######################################################################"
	touch $(OBJECT)
endef
endif
