###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

PKG_NAME   = gcc
VER        = 4.3.2

THISAPP    = $(PKG_NAME)-$(VER)
DL_FILE    = $(THISAPP).tar.bz2
DIR_APP    = $(DIR_SRC)/$(THISAPP)
CFLAGS     = -pipe
CXXFLAGS   =

GMP        = $(shell grep ^VER $(DIR_SRC)/lfs/gmp  | awk '{ print $$3 }')
MPFR       = $(shell grep ^VER $(DIR_SRC)/lfs/mpfr | awk '{ print $$3 }')

ifeq "$(STAGE)" "base"
	TARGET = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)
else
	TARGET = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)-pass$(PASS)
endif

ifeq "$(MACHINE)" "i586"
	CONFIGURE_ARGS = --disable-decimal-float
endif

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE) \
	gmp-$(GMP).tar.bz2 mpfr-$(MPFR).tar.bz2 \
	$(THISAPP)-fstack_protector-1.patch \
	$(THISAPP)-fortify_source-2.patch \
	$(THISAPP)-fpie-1.patch \
	$(THISAPP)-branch-startfiles-1.patch \
	$(THISAPP)-asprintf_fix.patch

install : $(TARGET)

download : $(objects)

$(objects) :
	@$(LOAD)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : 
	@$(PREBUILD)
	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build && cd $(DIR_SRC) && tar jxf $(DIR_DL)/$(DL_FILE)
	-mkdir -v $(DIR_SRC)/gcc-build

	# First, unpack gmp and mpfr.
	# We use the build-"magic" of the gcc build system that we compile libgmp and
	# libmpfr right (with -fPIC and so on).
	cd $(DIR_APP) && $(EXTRACTOR) $(DIR_DL)/gmp-$(GMP).tar.bz2
	cd $(DIR_APP) && ln -svf gmp-* gmp
	cd $(DIR_APP) && $(EXTRACTOR) $(DIR_DL)/mpfr-$(MPFR).tar.bz2
	cd $(DIR_APP) && ln -svf mpfr-* mpfr

ifeq "$(STAGE)" "toolchain"
ifeq "$(PASS)" "1"
	## Enable -fPIC by default
	cd $(DIR_APP) && sed 's/^\(#define CC1_SPEC.*\)\("\)$$/\1 %{fno-pic|fpic|fPIC:;:-fPIC}\2/' \
		-i gcc/config/i386/linux.h

	cd $(DIR_SRC)/gcc-build && \
		CC="gcc -B/usr/bin/" \
		../$(THISAPP)/configure \
			$(CONFIGURE_ARCH) \
			--target=$(IFS_TARGET) \
			--with-cpu=$(MACHINE) \
			--with-arch=$(MACHINE) \
			--prefix=$(TOOLS_DIR) \
			--with-local-prefix=$(TOOLS_DIR) \
			--libexecdir=$(TOOLS_DIR)/lib \
			--enable-languages=c \
			--enable-shared \
			--disable-nls \
			--disable-werror \
			$(CONFIGURE_ARGS)

	# 'gcc_cv_libc_provides_ssp=yes' is added because without it GCC may want to
	# use libssp if the host system's libc is unsupported:
	cd $(DIR_SRC)/gcc-build && make gcc_cv_libc_provides_ssp=yes $(PARALLELISMFLAGS)
	cd $(DIR_SRC)/gcc-build && make install

	ln -fvs gcc $(TOOLS_DIR)/bin/cc
endif

ifeq "$(PASS)" "2"
	# Enable hardening by default:
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fortify_source-2.patch
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fstack_protector-1.patch

	# This fpie patch also warns about DT_TEXTREL in shared objects (libraries and
	# PIE's), and makes linker warnings fatal. Disable --fatal-warnings with
	# -Wl,--no-fatal-warnings.
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fpie-1.patch
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-branch-startfiles-1.patch

	# This patch fixes a conflict between libiberty's asprintf() and Glibc's, when
	# -D_FORTIFY_SOURCE=2 is used:
	cd $(DIR_APP) && patch -Np0 -i $(DIR_PATCHES)/$(THISAPP)-asprintf_fix.patch

	cd $(DIR_APP) && sed 's@\./fixinc\.sh@-c true@' -i gcc/Makefile.in
	cd $(DIR_APP) && sed 's/^XCFLAGS =$$/& -fomit-frame-pointer/' -i gcc/Makefile.in
	cd $(DIR_APP) && \
		for file in $$(find gcc/config -name linux64.h -o -name linux.h); do \
			cp -uv $$file{,.orig}; \
			sed -e 's@/lib\(64\)\?\(32\)\?/ld@$(TOOLS_DIR)&@g' \
				-e 's@/usr@$(TOOLS_DIR)@g' $$file.orig > $$file; \
			echo -e "\n#undef STANDARD_INCLUDE_DIR\n#define STANDARD_INCLUDE_DIR 0" >> $$file; \
			touch $$file.orig; \
		done

	# Libgomp uses -Werror regardless of --disable-werror, and this will cause a
	# build failure when -D_FORTIFY_SOURCE=2 causes build time warnings:
	cd $(DIR_APP) && sed -e "s/-Werror//" -i libgomp/configure

	# We need to do another bootstrap, so that everything in $(TOOLS_DIR) is hardened.
	cd $(DIR_SRC)/gcc-build && \
		../$(THISAPP)/configure \
			$(CONFIGURE_ARCH) \
			--target=$(IFS_TARGET) \
			--with-cpu=$(MACHINE) \
			--with-arch=$(MACHINE) \
			--prefix=$(TOOLS_DIR) \
			--with-local-prefix=$(TOOLS_DIR) \
			--libexecdir=$(TOOLS_DIR)/lib \
			--enable-clocale=gnu \
			--enable-shared \
			--enable-threads=posix \
			--enable-__cxa_atexit \
			--enable-languages=c,c++ \
			--disable-libstdcxx-pch \
			--disable-bootstrap \
			--disable-werror \
			--disable-nls \
			$(CONFIGURE_ARGS)
	cd $(DIR_SRC)/gcc-build && make $(PARALLELISMFLAGS)
	cd $(DIR_SRC)/gcc-build && make install
endif
endif

ifeq "$(STAGE)" "base"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fortify_source-2.patch
ifeq "$(SSP)" "1"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fstack_protector-1.patch
endif
ifeq "$(PIE)" "1"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-fpie-1.patch
endif
	cd $(DIR_APP) && sed -i 's/install_to_$$(INSTALL_DEST) //' libiberty/Makefile.in
	cd $(DIR_APP) && sed -i 's/^XCFLAGS =$$/& -fomit-frame-pointer/' gcc/Makefile.in
	cd $(DIR_APP) && sed -i 's@\./fixinc\.sh@-c true@' gcc/Makefile.in

	# Libgomp uses -Werror regardless of --disable-werror, and this will cause a
	# build failure when -D_FORTIFY_SOURCE=2 causes build time warnings:
	cd $(DIR_APP) && sed -e "s/-Werror//" -i libgomp/configure

	cd $(DIR_SRC)/gcc-build && \
		../$(THISAPP)/configure \
			$(CONFIGURE_ARCH) \
			--target=$(IFS_TARGET) \
			--with-cpu=$(MACHINE) \
			--with-arch=$(MACHINE) \
			--prefix=/usr \
			--libexecdir=/usr/lib \
			--enable-shared \
			--enable-threads=posix \
			--enable-__cxa_atexit \
			--enable-clocale=gnu \
			--enable-languages=c,c++ \
			--disable-bootstrap \
			--disable-werror

	cd $(DIR_SRC)/gcc-build && make $(PARALLELISMFLAGS)
	cd $(DIR_SRC)/gcc-build && make install

	ln -sfv ../usr/bin/cpp /lib
	ln -sfv gcc /usr/bin/cc
endif

	@rm -rf $(DIR_APP) $(DIR_SRC)/gcc-build
	@$(POSTBUILD)
