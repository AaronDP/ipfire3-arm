###############################################################################
#                                                                             #
# IPFire.org - A linux based firewall                                         #
# Copyright (C) 2007  Michael Tremer & Christian Schmidt                      #
#                                                                             #
# This program is free software: you can redistribute it and/or modify        #
# it under the terms of the GNU General Public License as published by        #
# the Free Software Foundation, either version 3 of the License, or           #
# (at your option) any later version.                                         #
#                                                                             #
# This program is distributed in the hope that it will be useful,             #
# but WITHOUT ANY WARRANTY; without even the implied warranty of              #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the               #
# GNU General Public License for more details.                                #
#                                                                             #
# You should have received a copy of the GNU General Public License           #
# along with this program.  If not, see <http://www.gnu.org/licenses/>.       #
#                                                                             #
###############################################################################

###############################################################################
# Definitions
###############################################################################

include Config

PKG_NAME   = glibc
VER        = 2.7

THISAPP    = $(PKG_NAME)-$(VER)
DL_FILE    = $(THISAPP).tar.bz2
DIR_APP    = $(DIR_SRC)/$(THISAPP)

CFLAGS     = -O2
CXXFLAGS   =


ifeq "$(firstword $(MAKEFILE_LIST))" "$(PKG_NAME)"
	TARGET = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)
	CONFIGURE_ARGS = --prefix=/usr \
		--disable-profile \
		--enable-add-ons \
		--enable-kernel=2.6.0 \
		--libexecdir=/usr/lib/glibc \
		--disable-werror \
		--enable-bind-now
ifeq "$(SSP)" "1"
	CONFIGURE_ARGS += --enable-stackguard-randomization \
		--with-prng-device=/dev/erandom
endif
else
	TARGET = $(DIR_INFO)/$(STAGE_ORDER)_$(STAGE)/$(THISAPP)-cross
endif

###############################################################################
# Top-level Rules
###############################################################################

objects = $(DL_FILE) \
	glibc-libidn-$(VER).tar.bz2 \
	$(THISAPP)-pt_pax-1.patch \
	$(THISAPP)-ssp_hp-timing-1.patch \
	$(THISAPP)-arc4_prng-1.patch \
	$(THISAPP)-strlcpy_strlcat-1.patch \
	$(THISAPP)-asprintf_reset2null-1.patch \
	$(THISAPP)-issetugid-1.patch \
	$(THISAPP)-i586_chk-2.patch

install : $(TARGET)

download :$(patsubst %,$(DIR_DL)/%,$(objects))

$(patsubst %,$(DIR_DL)/%,$(objects)) :
	@$(LOAD)

###############################################################################
# Installation Details
###############################################################################

$(TARGET) : $(patsubst %,$(DIR_DL)/%,$(objects))
	@$(PREBUILD)
	@rm -rf $(DIR_APP) $(DIR_SRC)/glibc-build && cd $(DIR_SRC) && tar jxf $(DIR_DL)/$(DL_FILE)
	@mkdir $(DIR_SRC)/glibc-build

ifeq "$(STAGE)" "toolchain"
ifeq "$(MACHINE)" "i586"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-i586_chk-2.patch
endif
ifeq "$(PAX)" "1"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-pt_pax-1.patch
endif
	cd $(DIR_SRC)/glibc-build && CFLAGS="-O2 -march=$(MACHINE) -pipe" \
		../$(THISAPP)/configure \
			--prefix=$(TOOLS_DIR) \
			--host=$(IFS_TARGET) \
			--build=$(shell $(DIR_APP)/scripts/config.guess) \
			--disable-profile \
			--enable-add-ons \
			--enable-kernel=2.6.0 \
			--with-headers=$(TOOLS_DIR)/include \
			--without-selinux \
			--without-gd \
			--enable-bind-now \
			libc_cv_initfini_array=yes \
			libc_cv_forced_unwind=yes \
			libc_cv_c_cleanup=yes
			#--with-binutils=$(TOOLS_DIR)/bin
	cd $(DIR_SRC)/glibc-build && make PARALLELMFLAGS=-j$(PARALLELISM)
	-mkdir -v $(TOOLS_DIR)/etc
	touch $(TOOLS_DIR)/etc/ld.so.conf
	cd $(DIR_SRC)/glibc-build && make install
endif

ifeq "$(STAGE)" "base"
	tar jxf $(DIR_DL)/glibc-libidn-$(VER).tar.bz2 -C $(DIR_APP)
	cd $(DIR_APP) && mv glibc-libidn-$(VER) libidn
ifeq "$(SSP)" "1"
ifeq "$(MACHINE)" "i686"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-ssp_hp-timing-1.patch
endif
	#cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-wur-1.patch
endif
	cd $(DIR_APP) && sed -i '/vi_VN.TCVN/d' localedata/SUPPORTED
	cd $(DIR_APP) && sed -i 's|libs -o|libs -L/usr/lib -Wl,-dynamic-linker=$(LINKER) -o|' \
		scripts/test-installation.pl
	cd $(DIR_APP) && sed -i 's|@BASH@|/bin/bash|' elf/ldd.bash.in
ifeq "$(PAX)" "1"
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-pt_pax-1.patch
endif
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-arc4_prng-1.patch
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-strlcpy_strlcat-1.patch
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-asprintf_reset2null-1.patch
	cd $(DIR_APP) && patch -Np1 -i $(DIR_PATCHES)/$(THISAPP)-issetugid-1.patch
	cd $(DIR_APP) && sed 's/#define UNSECURE_ENVVARS.*/&\
		"MUDFLAP_OPTIONS\\0" \\/' -i.orig sysdeps/generic/unsecvars.h
ifeq "$(SSP)" "1"
	cd $(DIR_APP) && sed 's/-nostdlib/& -fno-stack-protector/g' -i.orig configure
	cd $(DIR_APP) && sed 's/fstack-protector/&-all/' -i.orig nscd/Makefile
endif
ifeq "$(PIE)" "1"
	cd $(DIR_APP) && sed 's/CFLAGS-ldconfig.c =/& -fno-PIC -fno-PIE/' \
		-i.orig elf/Makefile
endif
	cd $(DIR_SRC)/glibc-build && \
		CFLAGS="-O2 -march=$(MACHINE) -pipe" \
		../$(THISAPP)/configure $(CONFIGURE_ARGS)
ifeq "$(SSP)" "1"
	## First compile the libraries
	echo "build-programs=no" >> $(DIR_SRC)/glibc-build/configparms
	echo "CC = gcc -fPIC -fno-stack-protector -U_FORTIFY_SOURCE -nonow -nopie" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo "CXX = g++ -fPIC -fno-stack-protector -U_FORTIFY_SOURCE -nonow -nopie" \
		>> $(DIR_SRC)/glibc-build/configparms
	cd $(DIR_SRC)/glibc-build && make PARALLELMFLAGS=-j$(PARALLELISM)

	## Second compile the rest
	@rm -f $(DIR_SRC)/glibc-build/configparms
	echo "CC = gcc -fPIE -fstack-protector-all -D_FORTIFY_SOURCE=2" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo "CXX = g++ -fPIE -fstack-protector-all -D_FORTIFY_SOURCE=2" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo "CFLAGS-sln.c += -fno-PIC -fno-PIE" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo "+link = \$$(CC) -nostdlib -nostartfiles -fPIE -pie -o \$$@ \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(sysdep-LDFLAGS) \$$(config-LDFLAGS) \$$(LDFLAGS) \$$(LDFLAGS-\$$(@F)) \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " -Wl,-z,combreloc -Wl,-z,relro -Wl,-z,now \$$(hashstyle-LDFLAGS) \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(addprefix \$$(csu-objpfx),S\$$(start-installed-name)) \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(+preinit) `\$$(CC) --print-file-name=crtbeginS.o` \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(filter-out \$$(addprefix \$$(csu-objpfx),start.o \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(start-installed-name))\\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(+preinit) \$$(link-extra-libs) \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(common-objpfx)libc% \$$(+postinit),\$$^) \\" \
		>> $(DIR_SRC)/glibc-build/configparms
	echo " \$$(link-extra-libs) \$$(link-libc) `\$$(CC) --print-file-name=crtendS.o` \$$(+postinit)" \
		>> $(DIR_SRC)/glibc-build/configparms
endif

	cd $(DIR_SRC)/glibc-build && make PARALLELMFLAGS=-j$(PARALLELISM)
	touch /etc/ld.so.conf
	cd $(DIR_SRC)/glibc-build && make install

	install -vd /usr/lib/static/
	mv -v /usr/lib/{libbsd-compat,libg,libieee,libmcheck}.a /usr/lib/static/
	mv -v /usr/lib/{libBrokenLocale,libanl,libcrypt}.a /usr/lib/static/
	mv -v /usr/lib/{libm,libnsl,libpthread,libresolv}.a /usr/lib/static/
	mv -v /usr/lib/{librpcsvc,librt,libutil}.a /usr/lib/static/

	# Locales
	cd $(DIR_SRC)/glibc-build && make localedata/install-locales

	# Timezone
	cp -v --remove-destination /usr/share/zoneinfo/GMT /etc/localtime
	
	# Set up ld.so.conf
	echo -e "# Begin /etc/ld.so.conf\n"	>> /etc/ld.so.conf
	echo -e "/usr/local/lib\n"		>> /etc/ld.so.conf
	echo    "# End /etc/ld.so.conf"		>> /etc/ld.so.conf
endif

	@rm -rf $(DIR_APP) $(DIR_SRC)/glibc-build
	@$(POSTBUILD)
