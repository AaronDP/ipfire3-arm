###############################################################################
# IPFire.org    - An Open Source Firewall Solution                            #
# Copyright (C) - IPFire Development Team <info@ipfire.org>                   #
###############################################################################

# TODO tzdata

name       = glibc
version    = 2.14
release    = 4

maintainer = Michael Tremer <michael.tremer@ipfire.org>
groups     = System/Base
url        = http://sources.redhat.com/glibc/
license    = GPLv2+ LGPLv2+
summary    = The GNU libc libraries.

description
	The glibc package contains standard libraries which are used by
	multiple programs on the system. In order to save disk space and
	memory, as well as to make upgrading easier, common system code is
	kept in one place and shared between programs. This particular package
	contains the most important sets of shared libraries: the standard C
	library and the standard math library. Without these two libraries, a
	Linux system will not function.
end

# The version of the ports addon.
ports_version = %{version}

source_dl  = http://ftp.gnu.org/gnu/glibc/
sources    = %{thisapp}.tar.xz glibc-ports-%{ports_version}.tar.xz

build
	# Optimize glibc for kernel
	OPTIMIZED_KERNEL = 2.6.32

	requires
		audit-devel
		autoconf
		automake
		gettext
		kernel-headers>=%{OPTIMIZED_KERNEL}
		libcap-devel
		libselinux-devel
		texinfo
	end

	# Build glibc with custom cflags
	GLIBC_FLAGS = -O3 -g -fasynchronous-unwind-tables -DNDEBUG -DPIC

	if "%{DISTRO_ARCH}" == "i686"
		GLIBC_FLAGS += -march=i686 -mtune=generic
	elif "%{DISTRO_ARCH}" == "x86_64"
		GLIBC_FLAGS += -mtune=generic
	end

	export CFLAGS   = %{GLIBC_FLAGS}
	export CXXFLAGS = %{GLIBC_FLAGS}

	export QUALITY_AGENT_RPATH_ALLOW_ORIGIN=yes

	prepare_cmds
		ln -svf ../glibc-ports-%{ports_version} ports

		if [ "%{DISTRO_ARCH}" = "armv5tel" ]; then
			sed -i configure \
				"s/libc_cv_gcc_static_libgcc=-static-libgcc/libc_cv_gcc_static_libgcc=/"
		fi

		# In the vi_VN.TCVN locale, bash enters an infinite loop at startup. It is
		# unknown whether this is a bash bug or a Glibc problem. Disable
		# installation of this locale in order to avoid the problem.
		sed -i '/vi_VN.TCVN/d' localedata/SUPPORTED

		# The ldd shell script contains Bash-specific syntax. Change its default
		# program interpreter to /bin/bash in case another /bin/sh is installed.
		sed -i 's|@BASH@|/bin/bash|' elf/ldd.bash.in

		# We don't install pt_chown(1) on the final system, so why install it to
		# $(TOOLS_DIR):
		sed -e "/^install.*pt_chown/d" -i login/Makefile

		# Build nscd with -fstack-protector-all, instead of -fstack-protector:
		sed -e "s/fstack-protector/&-all/" -i nscd/Makefile

		cat %{DIR_SOURCE}/glibc-stack_chk_fail.c > debug/stack_chk_fail.c

		# Use gnu hash style
		sed -i Makeconfig \
			-e "s/-Wl,--hash-style=both/-Wl,--hash-style=gnu -Wl,-O1/"

		# stdlib/tst-putenvmod is not linked against libc.
		sed -i stdlib/Makefile \
			-e "s/^CFLAGS-tst-putenvmod.c.*/& -fno-stack-protector/g"

		# stdio-common/bug22 hits timeout.
		sed -i stdio-common/bug22.c \
			-e "s/#define TIMEOUT.*/#define TIMEOUT 300/"

		# These tests don't work or need more investigation:
		sed -i dlfcn/Makefile -e "s/default //g"

		sed -i nptl/Makefile \
			-e "s/tst-mutex5 //g" \
			-e "s/tst-mutex5a //g" \
			-e "s/tst-cond11 //g" \
			-e "s/tst-rwlock6 //g" \
			-e "s/tst-rwlock7 //g" \
			-e "s/tst-sem5 //g" \
			-e "s/tst-cancelx4 //g" \
			-e "s/tst-cancelx5 //g" \
			-e "s/tst-cancelx10 //g" \
			-e "s/tst-cancelx18 //g" \
			-e "s/tst-signal1 //g"

		# These are known to fail on x86:
		sed -i rt/Makefile \
			-e "s/tst-cpuclock1 //g" \
			-e "s/tst-cpuclock2 //g"

		sed -i elf/Makefile \
			-e "s/tst-tls1 //g" \
			-e "s/tst-tls1-static //g" \
			-e "s/tst-tls2 //g" \
			-e "s/tst-tls2-static //g" \
			-e "s/tst-tls3 //g" \
			-e "s/resolvfail //g" \
			-e "s/constload1 //g" \
			-e "s/order //g" \
			-e "s/lateglobal //g" \
			-e "s/dblload //g" \
			-e "s/dblunload //g" \
			-e "s/reldep6 //g" \
			-e "s/circleload1 //g" \
			-e "s/tst-global1 //g" \
			-e "s/tst-audit2 //g" \
			-e "s/check-localplt //g" \
			-e "s/check-localplt.out$$//g"

		sed -i signal/Makefile \
			-e "s/tst-sigset2//g"
	end

	configure_options = \
		--build=%{DISTRO_BUILDTARGET} \
		--host=%{DISTRO_BUILDTARGET} \
		--prefix=/usr \
		--libexecdir=/usr/lib/glibc \
		--disable-profile \
		--enable-add-ons \
		--enable-kernel=%{OPTIMIZED_KERNEL} \
		--with-selinux \
		--disable-werror \
		--enable-bind-now \
		--enable-__thread \
		--enable-tls \
		--enable-experimental-malloc \
		--with-gd \
		--with-nss-crypt

	if "%{DISTRO_ARCH}" == "armv5tel"
		# Disable hardware FP for ARM.
		configure_options += \
			--without-fp
	end

	build
		mkdir -p %{DIR_SRC}/glibc-build
		cd %{DIR_SRC}/glibc-build

		CFLAGS="${CFLAGS} -fno-asynchronous-unwind-tables" \
		../%{thisapp}/configure \
			%{configure_options}

		sed -i config.make \
			-e "s/^build-pic-default=.*/build-pic-default=yes/"

		# Our GCC is already passing -fPIC, and that's all we want for the libraries.
		# LDFLAGS.so is appended to so we don't build shared libraries with
		# DT_TEXTREL (and to tell us if something goes wrong). For now we only build
		# the libraries, not the programs:
		echo "build-programs=no" >> configparms

		make PARALLELMFLAGS=%{PARALLELISMFLAGS} \
			CFLAGS="%{CFLAGS} -fno-stack-protector -U_FORTIFY_SOURCE" \
			CXXFLAGS="%{CXXFLAGS} -fno-stack-protector -U_FORTIFY_SOURCE"

		# Then build the programs with hardening, so everything possible in
		# is hardened:
		echo "# Nothing in here :D" > configparms
		make PARALLELMFLAGS=%{PARALLELISMFLAGS} \
			CFLAGS="%{CFLAGS}" CXXFLAGS="%{CXXFLAGS}"
	end

	#test
	#	cd $(DIR_SRC)/glibc-build
	#	make check TIMEOUTFACTOR=16 \
	#		CFLAGS="%{CFLAGS} -fno-stack-protector -U_FORTIFY_SOURCE" \
	#		CXXFLAGS="%{CXXFLAGS} -fno-stack-protector -U_FORTIFY_SOURCE"
	#end

	install
		cd %{DIR_SRC}/glibc-build
		make install install_root=%{BUILDROOT}

		# Locales
		mkdir -pv %{BUILDROOT}/usr/lib/locale
		# This would install all locales that are supported
		make localedata/install-locales install_root=%{BUILDROOT}

		# Timezone
		cp -v --remove-destination %{BUILDROOT}/usr/share/zoneinfo/GMT \
			%{BUILDROOT}/etc/localtime

		# Configuration
		cp -vf %{DIR_SOURCE}/{ld.so.conf,nsswitch.conf} %{BUILDROOT}/etc
		mkdir -pv %{BUILDROOT}/etc/{default,ld.so.conf.d}
		install -p -m644 %{DIR_APP}/nis/nss %{BUILDROOT}/etc/default/nss

		# Remove unused binaries
		rm -vf %{BUILDROOT}/sbin/sln \
			%{BUILDROOT}/usr/bin/rpcinfo

		# Don't distribute linker cache
		rm -vf %{BUILDROOT}/etc/ld.so.cache

		# Include /usr/lib/gconv/gconv-modules.cache
		> %{BUILDROOT}/usr/lib/gconv/gconv-modules.cache
		chmod 644 %{BUILDROOT}/usr/lib/gconv/gconv-modules.cache

		strip -g %{BUILDROOT}/usr/lib/*.o

		# Move some libs to correct place
		mv -v %{BUILDROOT}/lib/lib{memusage,pcprofile}.so %{BUILDROOT}/usr/lib/
	end

	keep_libraries
		/usr/lib/libc_nonshared.a
		/usr/lib/libpthread_nonshared.a
	end
end

packages
	package glibc
		requires = glibc-common=%{thisver}	
	end

	package glibc-common
		# XXX description and summary are missing

		files
			/usr/bin
			/usr/sbin
			/usr/share
			!/usr/share/zoneinfo
		end
	end

	package glibc-devel
		summary = Object files for development using standard C libraries.
		description
			The glibc-devel package contains the object files necessary
			for developing programs which use the standard C libraries (which are
			used by nearly all programs).  If you are developing programs which
			will use the standard C libraries, your system needs to have these
			standard object files available in order to create the
			executables.

			Install glibc-devel if you are going to develop programs which will
			use the standard C libraries.
		end
		group = Development/Libraries

		requires = glibc-headers=%{thisver}

		files = /usr/lib/*.a /usr/lib/*.o
	end

	package glibc-headers
		description
			The glibc-headers package contains the header files necessary
			for developing programs which use the standard C libraries (which are
			used by nearly all programs).  If you are developing programs which
			will use the standard C libraries, your system needs to have these
			standard header files available in order to create the
			executables.

			Install glibc-headers if you are going to develop programs which will
			use the standard C libraries.
		end

		requires = kernel-headers

		files
			/usr/include
			!/usr/include/linuxthreads
			!/usr/include/gnu/stubs-[32164]*.h
		end
	end

	package nscd
		summary = A Name Service Caching Daemon (nscd).
		description
			Nscd caches name service lookups and can dramatically improve
			performance with NIS+, and may help with DNS as well.
		end
		group = System/Daemons

		files
			/usr/sbin/nscd
		end
	end

	package %{name}-utils
		summary = Development utilities from GNU C library.
		description
			The glibc-utils package contains memusage, a memory usage profiler,
			mtrace, a memory leak tracer and xtrace, a function call tracer
			which can be helpful during program debugging.
		end
		group = Development/Tools

		files
			/usr/bin/memusage
			/usr/bin/memusagestat
			/usr/bin/mtrace
			/usr/bin/pcprofiledump
			/usr/bin/xtrace
			/usr/lib/libmemusage.so
			/usr/lib/libpcprofile.so
		end
	end
end
